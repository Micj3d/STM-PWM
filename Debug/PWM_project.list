
PWM_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002108  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080021c8  080021c8  000121c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021f8  080021f8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080021f8  080021f8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021f8  080021f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021f8  080021f8  000121f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021fc  080021fc  000121fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002200  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  0800220c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  0800220c  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000075fb  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001345  00000000  00000000  0002762f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a8  00000000  00000000  00028978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000800  00000000  00000000  00029220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183d7  00000000  00000000  00029a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000978c  00000000  00000000  00041df7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fad6  00000000  00000000  0004b583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000db059  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ed8  00000000  00000000  000db0ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080021b0 	.word	0x080021b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080021b0 	.word	0x080021b0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 f9b2 	bl	800058c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f80c 	bl	8000244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f8cc 	bl	80003c8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000230:	f000 f848 	bl	80002c4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIMEx_PWMN_Start(&htim2, TIM_CHANNEL_1);
 8000234:	4b02      	ldr	r3, [pc, #8]	; (8000240 <main+0x20>)
 8000236:	2100      	movs	r1, #0
 8000238:	0018      	movs	r0, r3
 800023a:	f001 fe6f 	bl	8001f1c <HAL_TIMEx_PWMN_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800023e:	e7fe      	b.n	800023e <main+0x1e>
 8000240:	20000028 	.word	0x20000028

08000244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000244:	b590      	push	{r4, r7, lr}
 8000246:	b093      	sub	sp, #76	; 0x4c
 8000248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024a:	2414      	movs	r4, #20
 800024c:	193b      	adds	r3, r7, r4
 800024e:	0018      	movs	r0, r3
 8000250:	2334      	movs	r3, #52	; 0x34
 8000252:	001a      	movs	r2, r3
 8000254:	2100      	movs	r1, #0
 8000256:	f001 ffa3 	bl	80021a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	0018      	movs	r0, r3
 800025e:	2310      	movs	r3, #16
 8000260:	001a      	movs	r2, r3
 8000262:	2100      	movs	r1, #0
 8000264:	f001 ff9c 	bl	80021a0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000268:	0021      	movs	r1, r4
 800026a:	187b      	adds	r3, r7, r1
 800026c:	2202      	movs	r2, #2
 800026e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000270:	187b      	adds	r3, r7, r1
 8000272:	2201      	movs	r2, #1
 8000274:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000276:	187b      	adds	r3, r7, r1
 8000278:	2210      	movs	r2, #16
 800027a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800027c:	187b      	adds	r3, r7, r1
 800027e:	2200      	movs	r2, #0
 8000280:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000282:	187b      	adds	r3, r7, r1
 8000284:	0018      	movs	r0, r3
 8000286:	f000 fc11 	bl	8000aac <HAL_RCC_OscConfig>
 800028a:	1e03      	subs	r3, r0, #0
 800028c:	d001      	beq.n	8000292 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800028e:	f000 f8b3 	bl	80003f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	2207      	movs	r2, #7
 8000296:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	2200      	movs	r2, #0
 800029c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	2200      	movs	r2, #0
 80002a2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	2200      	movs	r2, #0
 80002a8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2100      	movs	r1, #0
 80002ae:	0018      	movs	r0, r3
 80002b0:	f000 ff82 	bl	80011b8 <HAL_RCC_ClockConfig>
 80002b4:	1e03      	subs	r3, r0, #0
 80002b6:	d001      	beq.n	80002bc <SystemClock_Config+0x78>
  {
    Error_Handler();
 80002b8:	f000 f89e 	bl	80003f8 <Error_Handler>
  }
}
 80002bc:	46c0      	nop			; (mov r8, r8)
 80002be:	46bd      	mov	sp, r7
 80002c0:	b013      	add	sp, #76	; 0x4c
 80002c2:	bd90      	pop	{r4, r7, pc}

080002c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b08e      	sub	sp, #56	; 0x38
 80002c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002ca:	2328      	movs	r3, #40	; 0x28
 80002cc:	18fb      	adds	r3, r7, r3
 80002ce:	0018      	movs	r0, r3
 80002d0:	2310      	movs	r3, #16
 80002d2:	001a      	movs	r2, r3
 80002d4:	2100      	movs	r1, #0
 80002d6:	f001 ff63 	bl	80021a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002da:	2320      	movs	r3, #32
 80002dc:	18fb      	adds	r3, r7, r3
 80002de:	0018      	movs	r0, r3
 80002e0:	2308      	movs	r3, #8
 80002e2:	001a      	movs	r2, r3
 80002e4:	2100      	movs	r1, #0
 80002e6:	f001 ff5b 	bl	80021a0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	0018      	movs	r0, r3
 80002ee:	231c      	movs	r3, #28
 80002f0:	001a      	movs	r2, r3
 80002f2:	2100      	movs	r1, #0
 80002f4:	f001 ff54 	bl	80021a0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002f8:	4b30      	ldr	r3, [pc, #192]	; (80003bc <MX_TIM2_Init+0xf8>)
 80002fa:	2280      	movs	r2, #128	; 0x80
 80002fc:	05d2      	lsls	r2, r2, #23
 80002fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 127;
 8000300:	4b2e      	ldr	r3, [pc, #184]	; (80003bc <MX_TIM2_Init+0xf8>)
 8000302:	227f      	movs	r2, #127	; 0x7f
 8000304:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000306:	4b2d      	ldr	r3, [pc, #180]	; (80003bc <MX_TIM2_Init+0xf8>)
 8000308:	2200      	movs	r2, #0
 800030a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 62499;
 800030c:	4b2b      	ldr	r3, [pc, #172]	; (80003bc <MX_TIM2_Init+0xf8>)
 800030e:	4a2c      	ldr	r2, [pc, #176]	; (80003c0 <MX_TIM2_Init+0xfc>)
 8000310:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000312:	4b2a      	ldr	r3, [pc, #168]	; (80003bc <MX_TIM2_Init+0xf8>)
 8000314:	2200      	movs	r2, #0
 8000316:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000318:	4b28      	ldr	r3, [pc, #160]	; (80003bc <MX_TIM2_Init+0xf8>)
 800031a:	2200      	movs	r2, #0
 800031c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800031e:	4b27      	ldr	r3, [pc, #156]	; (80003bc <MX_TIM2_Init+0xf8>)
 8000320:	0018      	movs	r0, r3
 8000322:	f001 f8a3 	bl	800146c <HAL_TIM_Base_Init>
 8000326:	1e03      	subs	r3, r0, #0
 8000328:	d001      	beq.n	800032e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800032a:	f000 f865 	bl	80003f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800032e:	2128      	movs	r1, #40	; 0x28
 8000330:	187b      	adds	r3, r7, r1
 8000332:	2280      	movs	r2, #128	; 0x80
 8000334:	0152      	lsls	r2, r2, #5
 8000336:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000338:	187a      	adds	r2, r7, r1
 800033a:	4b20      	ldr	r3, [pc, #128]	; (80003bc <MX_TIM2_Init+0xf8>)
 800033c:	0011      	movs	r1, r2
 800033e:	0018      	movs	r0, r3
 8000340:	f001 fa02 	bl	8001748 <HAL_TIM_ConfigClockSource>
 8000344:	1e03      	subs	r3, r0, #0
 8000346:	d001      	beq.n	800034c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000348:	f000 f856 	bl	80003f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800034c:	4b1b      	ldr	r3, [pc, #108]	; (80003bc <MX_TIM2_Init+0xf8>)
 800034e:	0018      	movs	r0, r3
 8000350:	f001 f8dc 	bl	800150c <HAL_TIM_PWM_Init>
 8000354:	1e03      	subs	r3, r0, #0
 8000356:	d001      	beq.n	800035c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000358:	f000 f84e 	bl	80003f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800035c:	2120      	movs	r1, #32
 800035e:	187b      	adds	r3, r7, r1
 8000360:	2200      	movs	r2, #0
 8000362:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000364:	187b      	adds	r3, r7, r1
 8000366:	2200      	movs	r2, #0
 8000368:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800036a:	187a      	adds	r2, r7, r1
 800036c:	4b13      	ldr	r3, [pc, #76]	; (80003bc <MX_TIM2_Init+0xf8>)
 800036e:	0011      	movs	r1, r2
 8000370:	0018      	movs	r0, r3
 8000372:	f001 fe6f 	bl	8002054 <HAL_TIMEx_MasterConfigSynchronization>
 8000376:	1e03      	subs	r3, r0, #0
 8000378:	d001      	beq.n	800037e <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 800037a:	f000 f83d 	bl	80003f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	2260      	movs	r2, #96	; 0x60
 8000382:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 31250;
 8000384:	1d3b      	adds	r3, r7, #4
 8000386:	4a0f      	ldr	r2, [pc, #60]	; (80003c4 <MX_TIM2_Init+0x100>)
 8000388:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	2200      	movs	r2, #0
 800038e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000390:	1d3b      	adds	r3, r7, #4
 8000392:	2200      	movs	r2, #0
 8000394:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000396:	1d39      	adds	r1, r7, #4
 8000398:	4b08      	ldr	r3, [pc, #32]	; (80003bc <MX_TIM2_Init+0xf8>)
 800039a:	2200      	movs	r2, #0
 800039c:	0018      	movs	r0, r3
 800039e:	f001 f90d 	bl	80015bc <HAL_TIM_PWM_ConfigChannel>
 80003a2:	1e03      	subs	r3, r0, #0
 80003a4:	d001      	beq.n	80003aa <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80003a6:	f000 f827 	bl	80003f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80003aa:	4b04      	ldr	r3, [pc, #16]	; (80003bc <MX_TIM2_Init+0xf8>)
 80003ac:	0018      	movs	r0, r3
 80003ae:	f000 f869 	bl	8000484 <HAL_TIM_MspPostInit>

}
 80003b2:	46c0      	nop			; (mov r8, r8)
 80003b4:	46bd      	mov	sp, r7
 80003b6:	b00e      	add	sp, #56	; 0x38
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	46c0      	nop			; (mov r8, r8)
 80003bc:	20000028 	.word	0x20000028
 80003c0:	0000f423 	.word	0x0000f423
 80003c4:	00007a12 	.word	0x00007a12

080003c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ce:	4b09      	ldr	r3, [pc, #36]	; (80003f4 <MX_GPIO_Init+0x2c>)
 80003d0:	695a      	ldr	r2, [r3, #20]
 80003d2:	4b08      	ldr	r3, [pc, #32]	; (80003f4 <MX_GPIO_Init+0x2c>)
 80003d4:	2180      	movs	r1, #128	; 0x80
 80003d6:	0289      	lsls	r1, r1, #10
 80003d8:	430a      	orrs	r2, r1
 80003da:	615a      	str	r2, [r3, #20]
 80003dc:	4b05      	ldr	r3, [pc, #20]	; (80003f4 <MX_GPIO_Init+0x2c>)
 80003de:	695a      	ldr	r2, [r3, #20]
 80003e0:	2380      	movs	r3, #128	; 0x80
 80003e2:	029b      	lsls	r3, r3, #10
 80003e4:	4013      	ands	r3, r2
 80003e6:	607b      	str	r3, [r7, #4]
 80003e8:	687b      	ldr	r3, [r7, #4]

}
 80003ea:	46c0      	nop			; (mov r8, r8)
 80003ec:	46bd      	mov	sp, r7
 80003ee:	b002      	add	sp, #8
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	40021000 	.word	0x40021000

080003f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003fc:	b672      	cpsid	i
}
 80003fe:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000400:	e7fe      	b.n	8000400 <Error_Handler+0x8>
	...

08000404 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800040a:	4b0f      	ldr	r3, [pc, #60]	; (8000448 <HAL_MspInit+0x44>)
 800040c:	699a      	ldr	r2, [r3, #24]
 800040e:	4b0e      	ldr	r3, [pc, #56]	; (8000448 <HAL_MspInit+0x44>)
 8000410:	2101      	movs	r1, #1
 8000412:	430a      	orrs	r2, r1
 8000414:	619a      	str	r2, [r3, #24]
 8000416:	4b0c      	ldr	r3, [pc, #48]	; (8000448 <HAL_MspInit+0x44>)
 8000418:	699b      	ldr	r3, [r3, #24]
 800041a:	2201      	movs	r2, #1
 800041c:	4013      	ands	r3, r2
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000422:	4b09      	ldr	r3, [pc, #36]	; (8000448 <HAL_MspInit+0x44>)
 8000424:	69da      	ldr	r2, [r3, #28]
 8000426:	4b08      	ldr	r3, [pc, #32]	; (8000448 <HAL_MspInit+0x44>)
 8000428:	2180      	movs	r1, #128	; 0x80
 800042a:	0549      	lsls	r1, r1, #21
 800042c:	430a      	orrs	r2, r1
 800042e:	61da      	str	r2, [r3, #28]
 8000430:	4b05      	ldr	r3, [pc, #20]	; (8000448 <HAL_MspInit+0x44>)
 8000432:	69da      	ldr	r2, [r3, #28]
 8000434:	2380      	movs	r3, #128	; 0x80
 8000436:	055b      	lsls	r3, r3, #21
 8000438:	4013      	ands	r3, r2
 800043a:	603b      	str	r3, [r7, #0]
 800043c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	46bd      	mov	sp, r7
 8000442:	b002      	add	sp, #8
 8000444:	bd80      	pop	{r7, pc}
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	40021000 	.word	0x40021000

0800044c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b084      	sub	sp, #16
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681a      	ldr	r2, [r3, #0]
 8000458:	2380      	movs	r3, #128	; 0x80
 800045a:	05db      	lsls	r3, r3, #23
 800045c:	429a      	cmp	r2, r3
 800045e:	d10b      	bne.n	8000478 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000460:	4b07      	ldr	r3, [pc, #28]	; (8000480 <HAL_TIM_Base_MspInit+0x34>)
 8000462:	69da      	ldr	r2, [r3, #28]
 8000464:	4b06      	ldr	r3, [pc, #24]	; (8000480 <HAL_TIM_Base_MspInit+0x34>)
 8000466:	2101      	movs	r1, #1
 8000468:	430a      	orrs	r2, r1
 800046a:	61da      	str	r2, [r3, #28]
 800046c:	4b04      	ldr	r3, [pc, #16]	; (8000480 <HAL_TIM_Base_MspInit+0x34>)
 800046e:	69db      	ldr	r3, [r3, #28]
 8000470:	2201      	movs	r2, #1
 8000472:	4013      	ands	r3, r2
 8000474:	60fb      	str	r3, [r7, #12]
 8000476:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000478:	46c0      	nop			; (mov r8, r8)
 800047a:	46bd      	mov	sp, r7
 800047c:	b004      	add	sp, #16
 800047e:	bd80      	pop	{r7, pc}
 8000480:	40021000 	.word	0x40021000

08000484 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000484:	b590      	push	{r4, r7, lr}
 8000486:	b089      	sub	sp, #36	; 0x24
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048c:	240c      	movs	r4, #12
 800048e:	193b      	adds	r3, r7, r4
 8000490:	0018      	movs	r0, r3
 8000492:	2314      	movs	r3, #20
 8000494:	001a      	movs	r2, r3
 8000496:	2100      	movs	r1, #0
 8000498:	f001 fe82 	bl	80021a0 <memset>
  if(htim->Instance==TIM2)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681a      	ldr	r2, [r3, #0]
 80004a0:	2380      	movs	r3, #128	; 0x80
 80004a2:	05db      	lsls	r3, r3, #23
 80004a4:	429a      	cmp	r2, r3
 80004a6:	d124      	bne.n	80004f2 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a8:	4b14      	ldr	r3, [pc, #80]	; (80004fc <HAL_TIM_MspPostInit+0x78>)
 80004aa:	695a      	ldr	r2, [r3, #20]
 80004ac:	4b13      	ldr	r3, [pc, #76]	; (80004fc <HAL_TIM_MspPostInit+0x78>)
 80004ae:	2180      	movs	r1, #128	; 0x80
 80004b0:	0289      	lsls	r1, r1, #10
 80004b2:	430a      	orrs	r2, r1
 80004b4:	615a      	str	r2, [r3, #20]
 80004b6:	4b11      	ldr	r3, [pc, #68]	; (80004fc <HAL_TIM_MspPostInit+0x78>)
 80004b8:	695a      	ldr	r2, [r3, #20]
 80004ba:	2380      	movs	r3, #128	; 0x80
 80004bc:	029b      	lsls	r3, r3, #10
 80004be:	4013      	ands	r3, r2
 80004c0:	60bb      	str	r3, [r7, #8]
 80004c2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80004c4:	0021      	movs	r1, r4
 80004c6:	187b      	adds	r3, r7, r1
 80004c8:	2220      	movs	r2, #32
 80004ca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	2202      	movs	r2, #2
 80004d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	2200      	movs	r2, #0
 80004d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d8:	187b      	adds	r3, r7, r1
 80004da:	2200      	movs	r2, #0
 80004dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80004de:	187b      	adds	r3, r7, r1
 80004e0:	2202      	movs	r2, #2
 80004e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e4:	187a      	adds	r2, r7, r1
 80004e6:	2390      	movs	r3, #144	; 0x90
 80004e8:	05db      	lsls	r3, r3, #23
 80004ea:	0011      	movs	r1, r2
 80004ec:	0018      	movs	r0, r3
 80004ee:	f000 f965 	bl	80007bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	46bd      	mov	sp, r7
 80004f6:	b009      	add	sp, #36	; 0x24
 80004f8:	bd90      	pop	{r4, r7, pc}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	40021000 	.word	0x40021000

08000500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000504:	e7fe      	b.n	8000504 <NMI_Handler+0x4>

08000506 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000506:	b580      	push	{r7, lr}
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800050a:	e7fe      	b.n	800050a <HardFault_Handler+0x4>

0800050c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000510:	46c0      	nop			; (mov r8, r8)
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}

08000516 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000516:	b580      	push	{r7, lr}
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}

08000520 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000524:	f000 f87a 	bl	800061c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000528:	46c0      	nop			; (mov r8, r8)
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}

0800052e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800052e:	b580      	push	{r7, lr}
 8000530:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}

08000538 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000538:	480d      	ldr	r0, [pc, #52]	; (8000570 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800053a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800053c:	480d      	ldr	r0, [pc, #52]	; (8000574 <LoopForever+0x6>)
  ldr r1, =_edata
 800053e:	490e      	ldr	r1, [pc, #56]	; (8000578 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000540:	4a0e      	ldr	r2, [pc, #56]	; (800057c <LoopForever+0xe>)
  movs r3, #0
 8000542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000544:	e002      	b.n	800054c <LoopCopyDataInit>

08000546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800054a:	3304      	adds	r3, #4

0800054c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800054c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800054e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000550:	d3f9      	bcc.n	8000546 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000552:	4a0b      	ldr	r2, [pc, #44]	; (8000580 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000554:	4c0b      	ldr	r4, [pc, #44]	; (8000584 <LoopForever+0x16>)
  movs r3, #0
 8000556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000558:	e001      	b.n	800055e <LoopFillZerobss>

0800055a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800055a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800055c:	3204      	adds	r2, #4

0800055e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800055e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000560:	d3fb      	bcc.n	800055a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000562:	f7ff ffe4 	bl	800052e <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000566:	f001 fdf7 	bl	8002158 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800056a:	f7ff fe59 	bl	8000220 <main>

0800056e <LoopForever>:

LoopForever:
    b LoopForever
 800056e:	e7fe      	b.n	800056e <LoopForever>
  ldr   r0, =_estack
 8000570:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000574:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000578:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800057c:	08002200 	.word	0x08002200
  ldr r2, =_sbss
 8000580:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000584:	20000074 	.word	0x20000074

08000588 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000588:	e7fe      	b.n	8000588 <ADC1_COMP_IRQHandler>
	...

0800058c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000590:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <HAL_Init+0x24>)
 8000592:	681a      	ldr	r2, [r3, #0]
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <HAL_Init+0x24>)
 8000596:	2110      	movs	r1, #16
 8000598:	430a      	orrs	r2, r1
 800059a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800059c:	2003      	movs	r0, #3
 800059e:	f000 f809 	bl	80005b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005a2:	f7ff ff2f 	bl	8000404 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005a6:	2300      	movs	r3, #0
}
 80005a8:	0018      	movs	r0, r3
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	40022000 	.word	0x40022000

080005b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005b4:	b590      	push	{r4, r7, lr}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005bc:	4b14      	ldr	r3, [pc, #80]	; (8000610 <HAL_InitTick+0x5c>)
 80005be:	681c      	ldr	r4, [r3, #0]
 80005c0:	4b14      	ldr	r3, [pc, #80]	; (8000614 <HAL_InitTick+0x60>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	0019      	movs	r1, r3
 80005c6:	23fa      	movs	r3, #250	; 0xfa
 80005c8:	0098      	lsls	r0, r3, #2
 80005ca:	f7ff fd9d 	bl	8000108 <__udivsi3>
 80005ce:	0003      	movs	r3, r0
 80005d0:	0019      	movs	r1, r3
 80005d2:	0020      	movs	r0, r4
 80005d4:	f7ff fd98 	bl	8000108 <__udivsi3>
 80005d8:	0003      	movs	r3, r0
 80005da:	0018      	movs	r0, r3
 80005dc:	f000 f8e1 	bl	80007a2 <HAL_SYSTICK_Config>
 80005e0:	1e03      	subs	r3, r0, #0
 80005e2:	d001      	beq.n	80005e8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80005e4:	2301      	movs	r3, #1
 80005e6:	e00f      	b.n	8000608 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2b03      	cmp	r3, #3
 80005ec:	d80b      	bhi.n	8000606 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005ee:	6879      	ldr	r1, [r7, #4]
 80005f0:	2301      	movs	r3, #1
 80005f2:	425b      	negs	r3, r3
 80005f4:	2200      	movs	r2, #0
 80005f6:	0018      	movs	r0, r3
 80005f8:	f000 f8be 	bl	8000778 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <HAL_InitTick+0x64>)
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000602:	2300      	movs	r3, #0
 8000604:	e000      	b.n	8000608 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000606:	2301      	movs	r3, #1
}
 8000608:	0018      	movs	r0, r3
 800060a:	46bd      	mov	sp, r7
 800060c:	b003      	add	sp, #12
 800060e:	bd90      	pop	{r4, r7, pc}
 8000610:	20000000 	.word	0x20000000
 8000614:	20000008 	.word	0x20000008
 8000618:	20000004 	.word	0x20000004

0800061c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000620:	4b05      	ldr	r3, [pc, #20]	; (8000638 <HAL_IncTick+0x1c>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	001a      	movs	r2, r3
 8000626:	4b05      	ldr	r3, [pc, #20]	; (800063c <HAL_IncTick+0x20>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	18d2      	adds	r2, r2, r3
 800062c:	4b03      	ldr	r3, [pc, #12]	; (800063c <HAL_IncTick+0x20>)
 800062e:	601a      	str	r2, [r3, #0]
}
 8000630:	46c0      	nop			; (mov r8, r8)
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	20000008 	.word	0x20000008
 800063c:	20000070 	.word	0x20000070

08000640 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  return uwTick;
 8000644:	4b02      	ldr	r3, [pc, #8]	; (8000650 <HAL_GetTick+0x10>)
 8000646:	681b      	ldr	r3, [r3, #0]
}
 8000648:	0018      	movs	r0, r3
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	20000070 	.word	0x20000070

08000654 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000654:	b590      	push	{r4, r7, lr}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	0002      	movs	r2, r0
 800065c:	6039      	str	r1, [r7, #0]
 800065e:	1dfb      	adds	r3, r7, #7
 8000660:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000662:	1dfb      	adds	r3, r7, #7
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b7f      	cmp	r3, #127	; 0x7f
 8000668:	d828      	bhi.n	80006bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800066a:	4a2f      	ldr	r2, [pc, #188]	; (8000728 <__NVIC_SetPriority+0xd4>)
 800066c:	1dfb      	adds	r3, r7, #7
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	b25b      	sxtb	r3, r3
 8000672:	089b      	lsrs	r3, r3, #2
 8000674:	33c0      	adds	r3, #192	; 0xc0
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	589b      	ldr	r3, [r3, r2]
 800067a:	1dfa      	adds	r2, r7, #7
 800067c:	7812      	ldrb	r2, [r2, #0]
 800067e:	0011      	movs	r1, r2
 8000680:	2203      	movs	r2, #3
 8000682:	400a      	ands	r2, r1
 8000684:	00d2      	lsls	r2, r2, #3
 8000686:	21ff      	movs	r1, #255	; 0xff
 8000688:	4091      	lsls	r1, r2
 800068a:	000a      	movs	r2, r1
 800068c:	43d2      	mvns	r2, r2
 800068e:	401a      	ands	r2, r3
 8000690:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	019b      	lsls	r3, r3, #6
 8000696:	22ff      	movs	r2, #255	; 0xff
 8000698:	401a      	ands	r2, r3
 800069a:	1dfb      	adds	r3, r7, #7
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	0018      	movs	r0, r3
 80006a0:	2303      	movs	r3, #3
 80006a2:	4003      	ands	r3, r0
 80006a4:	00db      	lsls	r3, r3, #3
 80006a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006a8:	481f      	ldr	r0, [pc, #124]	; (8000728 <__NVIC_SetPriority+0xd4>)
 80006aa:	1dfb      	adds	r3, r7, #7
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	b25b      	sxtb	r3, r3
 80006b0:	089b      	lsrs	r3, r3, #2
 80006b2:	430a      	orrs	r2, r1
 80006b4:	33c0      	adds	r3, #192	; 0xc0
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80006ba:	e031      	b.n	8000720 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006bc:	4a1b      	ldr	r2, [pc, #108]	; (800072c <__NVIC_SetPriority+0xd8>)
 80006be:	1dfb      	adds	r3, r7, #7
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	0019      	movs	r1, r3
 80006c4:	230f      	movs	r3, #15
 80006c6:	400b      	ands	r3, r1
 80006c8:	3b08      	subs	r3, #8
 80006ca:	089b      	lsrs	r3, r3, #2
 80006cc:	3306      	adds	r3, #6
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	18d3      	adds	r3, r2, r3
 80006d2:	3304      	adds	r3, #4
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	1dfa      	adds	r2, r7, #7
 80006d8:	7812      	ldrb	r2, [r2, #0]
 80006da:	0011      	movs	r1, r2
 80006dc:	2203      	movs	r2, #3
 80006de:	400a      	ands	r2, r1
 80006e0:	00d2      	lsls	r2, r2, #3
 80006e2:	21ff      	movs	r1, #255	; 0xff
 80006e4:	4091      	lsls	r1, r2
 80006e6:	000a      	movs	r2, r1
 80006e8:	43d2      	mvns	r2, r2
 80006ea:	401a      	ands	r2, r3
 80006ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	019b      	lsls	r3, r3, #6
 80006f2:	22ff      	movs	r2, #255	; 0xff
 80006f4:	401a      	ands	r2, r3
 80006f6:	1dfb      	adds	r3, r7, #7
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	0018      	movs	r0, r3
 80006fc:	2303      	movs	r3, #3
 80006fe:	4003      	ands	r3, r0
 8000700:	00db      	lsls	r3, r3, #3
 8000702:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000704:	4809      	ldr	r0, [pc, #36]	; (800072c <__NVIC_SetPriority+0xd8>)
 8000706:	1dfb      	adds	r3, r7, #7
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	001c      	movs	r4, r3
 800070c:	230f      	movs	r3, #15
 800070e:	4023      	ands	r3, r4
 8000710:	3b08      	subs	r3, #8
 8000712:	089b      	lsrs	r3, r3, #2
 8000714:	430a      	orrs	r2, r1
 8000716:	3306      	adds	r3, #6
 8000718:	009b      	lsls	r3, r3, #2
 800071a:	18c3      	adds	r3, r0, r3
 800071c:	3304      	adds	r3, #4
 800071e:	601a      	str	r2, [r3, #0]
}
 8000720:	46c0      	nop			; (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	b003      	add	sp, #12
 8000726:	bd90      	pop	{r4, r7, pc}
 8000728:	e000e100 	.word	0xe000e100
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	1e5a      	subs	r2, r3, #1
 800073c:	2380      	movs	r3, #128	; 0x80
 800073e:	045b      	lsls	r3, r3, #17
 8000740:	429a      	cmp	r2, r3
 8000742:	d301      	bcc.n	8000748 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000744:	2301      	movs	r3, #1
 8000746:	e010      	b.n	800076a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000748:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <SysTick_Config+0x44>)
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	3a01      	subs	r2, #1
 800074e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000750:	2301      	movs	r3, #1
 8000752:	425b      	negs	r3, r3
 8000754:	2103      	movs	r1, #3
 8000756:	0018      	movs	r0, r3
 8000758:	f7ff ff7c 	bl	8000654 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <SysTick_Config+0x44>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000762:	4b04      	ldr	r3, [pc, #16]	; (8000774 <SysTick_Config+0x44>)
 8000764:	2207      	movs	r2, #7
 8000766:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000768:	2300      	movs	r3, #0
}
 800076a:	0018      	movs	r0, r3
 800076c:	46bd      	mov	sp, r7
 800076e:	b002      	add	sp, #8
 8000770:	bd80      	pop	{r7, pc}
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	e000e010 	.word	0xe000e010

08000778 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	60b9      	str	r1, [r7, #8]
 8000780:	607a      	str	r2, [r7, #4]
 8000782:	210f      	movs	r1, #15
 8000784:	187b      	adds	r3, r7, r1
 8000786:	1c02      	adds	r2, r0, #0
 8000788:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800078a:	68ba      	ldr	r2, [r7, #8]
 800078c:	187b      	adds	r3, r7, r1
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	b25b      	sxtb	r3, r3
 8000792:	0011      	movs	r1, r2
 8000794:	0018      	movs	r0, r3
 8000796:	f7ff ff5d 	bl	8000654 <__NVIC_SetPriority>
}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	46bd      	mov	sp, r7
 800079e:	b004      	add	sp, #16
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	0018      	movs	r0, r3
 80007ae:	f7ff ffbf 	bl	8000730 <SysTick_Config>
 80007b2:	0003      	movs	r3, r0
}
 80007b4:	0018      	movs	r0, r3
 80007b6:	46bd      	mov	sp, r7
 80007b8:	b002      	add	sp, #8
 80007ba:	bd80      	pop	{r7, pc}

080007bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007ca:	e155      	b.n	8000a78 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2101      	movs	r1, #1
 80007d2:	697a      	ldr	r2, [r7, #20]
 80007d4:	4091      	lsls	r1, r2
 80007d6:	000a      	movs	r2, r1
 80007d8:	4013      	ands	r3, r2
 80007da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d100      	bne.n	80007e4 <HAL_GPIO_Init+0x28>
 80007e2:	e146      	b.n	8000a72 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	2203      	movs	r2, #3
 80007ea:	4013      	ands	r3, r2
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d005      	beq.n	80007fc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	685b      	ldr	r3, [r3, #4]
 80007f4:	2203      	movs	r2, #3
 80007f6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80007f8:	2b02      	cmp	r3, #2
 80007fa:	d130      	bne.n	800085e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	689b      	ldr	r3, [r3, #8]
 8000800:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	005b      	lsls	r3, r3, #1
 8000806:	2203      	movs	r2, #3
 8000808:	409a      	lsls	r2, r3
 800080a:	0013      	movs	r3, r2
 800080c:	43da      	mvns	r2, r3
 800080e:	693b      	ldr	r3, [r7, #16]
 8000810:	4013      	ands	r3, r2
 8000812:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	68da      	ldr	r2, [r3, #12]
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	005b      	lsls	r3, r3, #1
 800081c:	409a      	lsls	r2, r3
 800081e:	0013      	movs	r3, r2
 8000820:	693a      	ldr	r2, [r7, #16]
 8000822:	4313      	orrs	r3, r2
 8000824:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	693a      	ldr	r2, [r7, #16]
 800082a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000832:	2201      	movs	r2, #1
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	409a      	lsls	r2, r3
 8000838:	0013      	movs	r3, r2
 800083a:	43da      	mvns	r2, r3
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	4013      	ands	r3, r2
 8000840:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	091b      	lsrs	r3, r3, #4
 8000848:	2201      	movs	r2, #1
 800084a:	401a      	ands	r2, r3
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	409a      	lsls	r2, r3
 8000850:	0013      	movs	r3, r2
 8000852:	693a      	ldr	r2, [r7, #16]
 8000854:	4313      	orrs	r3, r2
 8000856:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	693a      	ldr	r2, [r7, #16]
 800085c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	2203      	movs	r2, #3
 8000864:	4013      	ands	r3, r2
 8000866:	2b03      	cmp	r3, #3
 8000868:	d017      	beq.n	800089a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	68db      	ldr	r3, [r3, #12]
 800086e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	2203      	movs	r2, #3
 8000876:	409a      	lsls	r2, r3
 8000878:	0013      	movs	r3, r2
 800087a:	43da      	mvns	r2, r3
 800087c:	693b      	ldr	r3, [r7, #16]
 800087e:	4013      	ands	r3, r2
 8000880:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	689a      	ldr	r2, [r3, #8]
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	409a      	lsls	r2, r3
 800088c:	0013      	movs	r3, r2
 800088e:	693a      	ldr	r2, [r7, #16]
 8000890:	4313      	orrs	r3, r2
 8000892:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	693a      	ldr	r2, [r7, #16]
 8000898:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	2203      	movs	r2, #3
 80008a0:	4013      	ands	r3, r2
 80008a2:	2b02      	cmp	r3, #2
 80008a4:	d123      	bne.n	80008ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	08da      	lsrs	r2, r3, #3
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	3208      	adds	r2, #8
 80008ae:	0092      	lsls	r2, r2, #2
 80008b0:	58d3      	ldr	r3, [r2, r3]
 80008b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	2207      	movs	r2, #7
 80008b8:	4013      	ands	r3, r2
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	220f      	movs	r2, #15
 80008be:	409a      	lsls	r2, r3
 80008c0:	0013      	movs	r3, r2
 80008c2:	43da      	mvns	r2, r3
 80008c4:	693b      	ldr	r3, [r7, #16]
 80008c6:	4013      	ands	r3, r2
 80008c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	691a      	ldr	r2, [r3, #16]
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	2107      	movs	r1, #7
 80008d2:	400b      	ands	r3, r1
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	409a      	lsls	r2, r3
 80008d8:	0013      	movs	r3, r2
 80008da:	693a      	ldr	r2, [r7, #16]
 80008dc:	4313      	orrs	r3, r2
 80008de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	08da      	lsrs	r2, r3, #3
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	3208      	adds	r2, #8
 80008e8:	0092      	lsls	r2, r2, #2
 80008ea:	6939      	ldr	r1, [r7, #16]
 80008ec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	2203      	movs	r2, #3
 80008fa:	409a      	lsls	r2, r3
 80008fc:	0013      	movs	r3, r2
 80008fe:	43da      	mvns	r2, r3
 8000900:	693b      	ldr	r3, [r7, #16]
 8000902:	4013      	ands	r3, r2
 8000904:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	2203      	movs	r2, #3
 800090c:	401a      	ands	r2, r3
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	409a      	lsls	r2, r3
 8000914:	0013      	movs	r3, r2
 8000916:	693a      	ldr	r2, [r7, #16]
 8000918:	4313      	orrs	r3, r2
 800091a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	693a      	ldr	r2, [r7, #16]
 8000920:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	685a      	ldr	r2, [r3, #4]
 8000926:	23c0      	movs	r3, #192	; 0xc0
 8000928:	029b      	lsls	r3, r3, #10
 800092a:	4013      	ands	r3, r2
 800092c:	d100      	bne.n	8000930 <HAL_GPIO_Init+0x174>
 800092e:	e0a0      	b.n	8000a72 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000930:	4b57      	ldr	r3, [pc, #348]	; (8000a90 <HAL_GPIO_Init+0x2d4>)
 8000932:	699a      	ldr	r2, [r3, #24]
 8000934:	4b56      	ldr	r3, [pc, #344]	; (8000a90 <HAL_GPIO_Init+0x2d4>)
 8000936:	2101      	movs	r1, #1
 8000938:	430a      	orrs	r2, r1
 800093a:	619a      	str	r2, [r3, #24]
 800093c:	4b54      	ldr	r3, [pc, #336]	; (8000a90 <HAL_GPIO_Init+0x2d4>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	2201      	movs	r2, #1
 8000942:	4013      	ands	r3, r2
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000948:	4a52      	ldr	r2, [pc, #328]	; (8000a94 <HAL_GPIO_Init+0x2d8>)
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	089b      	lsrs	r3, r3, #2
 800094e:	3302      	adds	r3, #2
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	589b      	ldr	r3, [r3, r2]
 8000954:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	2203      	movs	r2, #3
 800095a:	4013      	ands	r3, r2
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	220f      	movs	r2, #15
 8000960:	409a      	lsls	r2, r3
 8000962:	0013      	movs	r3, r2
 8000964:	43da      	mvns	r2, r3
 8000966:	693b      	ldr	r3, [r7, #16]
 8000968:	4013      	ands	r3, r2
 800096a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800096c:	687a      	ldr	r2, [r7, #4]
 800096e:	2390      	movs	r3, #144	; 0x90
 8000970:	05db      	lsls	r3, r3, #23
 8000972:	429a      	cmp	r2, r3
 8000974:	d019      	beq.n	80009aa <HAL_GPIO_Init+0x1ee>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4a47      	ldr	r2, [pc, #284]	; (8000a98 <HAL_GPIO_Init+0x2dc>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d013      	beq.n	80009a6 <HAL_GPIO_Init+0x1ea>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4a46      	ldr	r2, [pc, #280]	; (8000a9c <HAL_GPIO_Init+0x2e0>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d00d      	beq.n	80009a2 <HAL_GPIO_Init+0x1e6>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4a45      	ldr	r2, [pc, #276]	; (8000aa0 <HAL_GPIO_Init+0x2e4>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d007      	beq.n	800099e <HAL_GPIO_Init+0x1e2>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a44      	ldr	r2, [pc, #272]	; (8000aa4 <HAL_GPIO_Init+0x2e8>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d101      	bne.n	800099a <HAL_GPIO_Init+0x1de>
 8000996:	2304      	movs	r3, #4
 8000998:	e008      	b.n	80009ac <HAL_GPIO_Init+0x1f0>
 800099a:	2305      	movs	r3, #5
 800099c:	e006      	b.n	80009ac <HAL_GPIO_Init+0x1f0>
 800099e:	2303      	movs	r3, #3
 80009a0:	e004      	b.n	80009ac <HAL_GPIO_Init+0x1f0>
 80009a2:	2302      	movs	r3, #2
 80009a4:	e002      	b.n	80009ac <HAL_GPIO_Init+0x1f0>
 80009a6:	2301      	movs	r3, #1
 80009a8:	e000      	b.n	80009ac <HAL_GPIO_Init+0x1f0>
 80009aa:	2300      	movs	r3, #0
 80009ac:	697a      	ldr	r2, [r7, #20]
 80009ae:	2103      	movs	r1, #3
 80009b0:	400a      	ands	r2, r1
 80009b2:	0092      	lsls	r2, r2, #2
 80009b4:	4093      	lsls	r3, r2
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009bc:	4935      	ldr	r1, [pc, #212]	; (8000a94 <HAL_GPIO_Init+0x2d8>)
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	089b      	lsrs	r3, r3, #2
 80009c2:	3302      	adds	r3, #2
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009ca:	4b37      	ldr	r3, [pc, #220]	; (8000aa8 <HAL_GPIO_Init+0x2ec>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	43da      	mvns	r2, r3
 80009d4:	693b      	ldr	r3, [r7, #16]
 80009d6:	4013      	ands	r3, r2
 80009d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	685a      	ldr	r2, [r3, #4]
 80009de:	2380      	movs	r3, #128	; 0x80
 80009e0:	025b      	lsls	r3, r3, #9
 80009e2:	4013      	ands	r3, r2
 80009e4:	d003      	beq.n	80009ee <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	4313      	orrs	r3, r2
 80009ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80009ee:	4b2e      	ldr	r3, [pc, #184]	; (8000aa8 <HAL_GPIO_Init+0x2ec>)
 80009f0:	693a      	ldr	r2, [r7, #16]
 80009f2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80009f4:	4b2c      	ldr	r3, [pc, #176]	; (8000aa8 <HAL_GPIO_Init+0x2ec>)
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	43da      	mvns	r2, r3
 80009fe:	693b      	ldr	r3, [r7, #16]
 8000a00:	4013      	ands	r3, r2
 8000a02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	685a      	ldr	r2, [r3, #4]
 8000a08:	2380      	movs	r3, #128	; 0x80
 8000a0a:	029b      	lsls	r3, r3, #10
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	d003      	beq.n	8000a18 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000a10:	693a      	ldr	r2, [r7, #16]
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000a18:	4b23      	ldr	r3, [pc, #140]	; (8000aa8 <HAL_GPIO_Init+0x2ec>)
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a1e:	4b22      	ldr	r3, [pc, #136]	; (8000aa8 <HAL_GPIO_Init+0x2ec>)
 8000a20:	689b      	ldr	r3, [r3, #8]
 8000a22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	43da      	mvns	r2, r3
 8000a28:	693b      	ldr	r3, [r7, #16]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685a      	ldr	r2, [r3, #4]
 8000a32:	2380      	movs	r3, #128	; 0x80
 8000a34:	035b      	lsls	r3, r3, #13
 8000a36:	4013      	ands	r3, r2
 8000a38:	d003      	beq.n	8000a42 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a42:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <HAL_GPIO_Init+0x2ec>)
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000a48:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <HAL_GPIO_Init+0x2ec>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	43da      	mvns	r2, r3
 8000a52:	693b      	ldr	r3, [r7, #16]
 8000a54:	4013      	ands	r3, r2
 8000a56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685a      	ldr	r2, [r3, #4]
 8000a5c:	2380      	movs	r3, #128	; 0x80
 8000a5e:	039b      	lsls	r3, r3, #14
 8000a60:	4013      	ands	r3, r2
 8000a62:	d003      	beq.n	8000a6c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000a64:	693a      	ldr	r2, [r7, #16]
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000a6c:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <HAL_GPIO_Init+0x2ec>)
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	3301      	adds	r3, #1
 8000a76:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	40da      	lsrs	r2, r3
 8000a80:	1e13      	subs	r3, r2, #0
 8000a82:	d000      	beq.n	8000a86 <HAL_GPIO_Init+0x2ca>
 8000a84:	e6a2      	b.n	80007cc <HAL_GPIO_Init+0x10>
  } 
}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	46c0      	nop			; (mov r8, r8)
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	b006      	add	sp, #24
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40021000 	.word	0x40021000
 8000a94:	40010000 	.word	0x40010000
 8000a98:	48000400 	.word	0x48000400
 8000a9c:	48000800 	.word	0x48000800
 8000aa0:	48000c00 	.word	0x48000c00
 8000aa4:	48001000 	.word	0x48001000
 8000aa8:	40010400 	.word	0x40010400

08000aac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b088      	sub	sp, #32
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d102      	bne.n	8000ac0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
 8000abc:	f000 fb76 	bl	80011ac <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	d100      	bne.n	8000acc <HAL_RCC_OscConfig+0x20>
 8000aca:	e08e      	b.n	8000bea <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000acc:	4bc5      	ldr	r3, [pc, #788]	; (8000de4 <HAL_RCC_OscConfig+0x338>)
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	220c      	movs	r2, #12
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	2b04      	cmp	r3, #4
 8000ad6:	d00e      	beq.n	8000af6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ad8:	4bc2      	ldr	r3, [pc, #776]	; (8000de4 <HAL_RCC_OscConfig+0x338>)
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	220c      	movs	r2, #12
 8000ade:	4013      	ands	r3, r2
 8000ae0:	2b08      	cmp	r3, #8
 8000ae2:	d117      	bne.n	8000b14 <HAL_RCC_OscConfig+0x68>
 8000ae4:	4bbf      	ldr	r3, [pc, #764]	; (8000de4 <HAL_RCC_OscConfig+0x338>)
 8000ae6:	685a      	ldr	r2, [r3, #4]
 8000ae8:	23c0      	movs	r3, #192	; 0xc0
 8000aea:	025b      	lsls	r3, r3, #9
 8000aec:	401a      	ands	r2, r3
 8000aee:	2380      	movs	r3, #128	; 0x80
 8000af0:	025b      	lsls	r3, r3, #9
 8000af2:	429a      	cmp	r2, r3
 8000af4:	d10e      	bne.n	8000b14 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000af6:	4bbb      	ldr	r3, [pc, #748]	; (8000de4 <HAL_RCC_OscConfig+0x338>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	2380      	movs	r3, #128	; 0x80
 8000afc:	029b      	lsls	r3, r3, #10
 8000afe:	4013      	ands	r3, r2
 8000b00:	d100      	bne.n	8000b04 <HAL_RCC_OscConfig+0x58>
 8000b02:	e071      	b.n	8000be8 <HAL_RCC_OscConfig+0x13c>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d000      	beq.n	8000b0e <HAL_RCC_OscConfig+0x62>
 8000b0c:	e06c      	b.n	8000be8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	f000 fb4c 	bl	80011ac <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d107      	bne.n	8000b2c <HAL_RCC_OscConfig+0x80>
 8000b1c:	4bb1      	ldr	r3, [pc, #708]	; (8000de4 <HAL_RCC_OscConfig+0x338>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	4bb0      	ldr	r3, [pc, #704]	; (8000de4 <HAL_RCC_OscConfig+0x338>)
 8000b22:	2180      	movs	r1, #128	; 0x80
 8000b24:	0249      	lsls	r1, r1, #9
 8000b26:	430a      	orrs	r2, r1
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	e02f      	b.n	8000b8c <HAL_RCC_OscConfig+0xe0>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d10c      	bne.n	8000b4e <HAL_RCC_OscConfig+0xa2>
 8000b34:	4bab      	ldr	r3, [pc, #684]	; (8000de4 <HAL_RCC_OscConfig+0x338>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4baa      	ldr	r3, [pc, #680]	; (8000de4 <HAL_RCC_OscConfig+0x338>)
 8000b3a:	49ab      	ldr	r1, [pc, #684]	; (8000de8 <HAL_RCC_OscConfig+0x33c>)
 8000b3c:	400a      	ands	r2, r1
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	4ba8      	ldr	r3, [pc, #672]	; (8000de4 <HAL_RCC_OscConfig+0x338>)
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	4ba7      	ldr	r3, [pc, #668]	; (8000de4 <HAL_RCC_OscConfig+0x338>)
 8000b46:	49a9      	ldr	r1, [pc, #676]	; (8000dec <HAL_RCC_OscConfig+0x340>)
 8000b48:	400a      	ands	r2, r1
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	e01e      	b.n	8000b8c <HAL_RCC_OscConfig+0xe0>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	2b05      	cmp	r3, #5
 8000b54:	d10e      	bne.n	8000b74 <HAL_RCC_OscConfig+0xc8>
 8000b56:	4ba3      	ldr	r3, [pc, #652]	; (8000de4 <HAL_RCC_OscConfig+0x338>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	4ba2      	ldr	r3, [pc, #648]	; (8000de4 <HAL_RCC_OscConfig+0x338>)
 8000b5c:	2180      	movs	r1, #128	; 0x80
 8000b5e:	02c9      	lsls	r1, r1, #11
 8000b60:	430a      	orrs	r2, r1
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	4b9f      	ldr	r3, [pc, #636]	; (8000de4 <HAL_RCC_OscConfig+0x338>)
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	4b9e      	ldr	r3, [pc, #632]	; (8000de4 <HAL_RCC_OscConfig+0x338>)
 8000b6a:	2180      	movs	r1, #128	; 0x80
 8000b6c:	0249      	lsls	r1, r1, #9
 8000b6e:	430a      	orrs	r2, r1
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	e00b      	b.n	8000b8c <HAL_RCC_OscConfig+0xe0>
 8000b74:	4b9b      	ldr	r3, [pc, #620]	; (8000de4 <HAL_RCC_OscConfig+0x338>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	4b9a      	ldr	r3, [pc, #616]	; (8000de4 <HAL_RCC_OscConfig+0x338>)
 8000b7a:	499b      	ldr	r1, [pc, #620]	; (8000de8 <HAL_RCC_OscConfig+0x33c>)
 8000b7c:	400a      	ands	r2, r1
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	4b98      	ldr	r3, [pc, #608]	; (8000de4 <HAL_RCC_OscConfig+0x338>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	4b97      	ldr	r3, [pc, #604]	; (8000de4 <HAL_RCC_OscConfig+0x338>)
 8000b86:	4999      	ldr	r1, [pc, #612]	; (8000dec <HAL_RCC_OscConfig+0x340>)
 8000b88:	400a      	ands	r2, r1
 8000b8a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d014      	beq.n	8000bbe <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b94:	f7ff fd54 	bl	8000640 <HAL_GetTick>
 8000b98:	0003      	movs	r3, r0
 8000b9a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b9c:	e008      	b.n	8000bb0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b9e:	f7ff fd4f 	bl	8000640 <HAL_GetTick>
 8000ba2:	0002      	movs	r2, r0
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	1ad3      	subs	r3, r2, r3
 8000ba8:	2b64      	cmp	r3, #100	; 0x64
 8000baa:	d901      	bls.n	8000bb0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000bac:	2303      	movs	r3, #3
 8000bae:	e2fd      	b.n	80011ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bb0:	4b8c      	ldr	r3, [pc, #560]	; (8000de4 <HAL_RCC_OscConfig+0x338>)
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	2380      	movs	r3, #128	; 0x80
 8000bb6:	029b      	lsls	r3, r3, #10
 8000bb8:	4013      	ands	r3, r2
 8000bba:	d0f0      	beq.n	8000b9e <HAL_RCC_OscConfig+0xf2>
 8000bbc:	e015      	b.n	8000bea <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bbe:	f7ff fd3f 	bl	8000640 <HAL_GetTick>
 8000bc2:	0003      	movs	r3, r0
 8000bc4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bc6:	e008      	b.n	8000bda <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bc8:	f7ff fd3a 	bl	8000640 <HAL_GetTick>
 8000bcc:	0002      	movs	r2, r0
 8000bce:	69bb      	ldr	r3, [r7, #24]
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	2b64      	cmp	r3, #100	; 0x64
 8000bd4:	d901      	bls.n	8000bda <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	e2e8      	b.n	80011ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bda:	4b82      	ldr	r3, [pc, #520]	; (8000de4 <HAL_RCC_OscConfig+0x338>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	2380      	movs	r3, #128	; 0x80
 8000be0:	029b      	lsls	r3, r3, #10
 8000be2:	4013      	ands	r3, r2
 8000be4:	d1f0      	bne.n	8000bc8 <HAL_RCC_OscConfig+0x11c>
 8000be6:	e000      	b.n	8000bea <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000be8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2202      	movs	r2, #2
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	d100      	bne.n	8000bf6 <HAL_RCC_OscConfig+0x14a>
 8000bf4:	e06c      	b.n	8000cd0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000bf6:	4b7b      	ldr	r3, [pc, #492]	; (8000de4 <HAL_RCC_OscConfig+0x338>)
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	d00e      	beq.n	8000c1e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000c00:	4b78      	ldr	r3, [pc, #480]	; (8000de4 <HAL_RCC_OscConfig+0x338>)
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	220c      	movs	r2, #12
 8000c06:	4013      	ands	r3, r2
 8000c08:	2b08      	cmp	r3, #8
 8000c0a:	d11f      	bne.n	8000c4c <HAL_RCC_OscConfig+0x1a0>
 8000c0c:	4b75      	ldr	r3, [pc, #468]	; (8000de4 <HAL_RCC_OscConfig+0x338>)
 8000c0e:	685a      	ldr	r2, [r3, #4]
 8000c10:	23c0      	movs	r3, #192	; 0xc0
 8000c12:	025b      	lsls	r3, r3, #9
 8000c14:	401a      	ands	r2, r3
 8000c16:	2380      	movs	r3, #128	; 0x80
 8000c18:	021b      	lsls	r3, r3, #8
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	d116      	bne.n	8000c4c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c1e:	4b71      	ldr	r3, [pc, #452]	; (8000de4 <HAL_RCC_OscConfig+0x338>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2202      	movs	r2, #2
 8000c24:	4013      	ands	r3, r2
 8000c26:	d005      	beq.n	8000c34 <HAL_RCC_OscConfig+0x188>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d001      	beq.n	8000c34 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000c30:	2301      	movs	r3, #1
 8000c32:	e2bb      	b.n	80011ac <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c34:	4b6b      	ldr	r3, [pc, #428]	; (8000de4 <HAL_RCC_OscConfig+0x338>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	22f8      	movs	r2, #248	; 0xf8
 8000c3a:	4393      	bics	r3, r2
 8000c3c:	0019      	movs	r1, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	691b      	ldr	r3, [r3, #16]
 8000c42:	00da      	lsls	r2, r3, #3
 8000c44:	4b67      	ldr	r3, [pc, #412]	; (8000de4 <HAL_RCC_OscConfig+0x338>)
 8000c46:	430a      	orrs	r2, r1
 8000c48:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c4a:	e041      	b.n	8000cd0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d024      	beq.n	8000c9e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c54:	4b63      	ldr	r3, [pc, #396]	; (8000de4 <HAL_RCC_OscConfig+0x338>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	4b62      	ldr	r3, [pc, #392]	; (8000de4 <HAL_RCC_OscConfig+0x338>)
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c60:	f7ff fcee 	bl	8000640 <HAL_GetTick>
 8000c64:	0003      	movs	r3, r0
 8000c66:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c68:	e008      	b.n	8000c7c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c6a:	f7ff fce9 	bl	8000640 <HAL_GetTick>
 8000c6e:	0002      	movs	r2, r0
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	1ad3      	subs	r3, r2, r3
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d901      	bls.n	8000c7c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	e297      	b.n	80011ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c7c:	4b59      	ldr	r3, [pc, #356]	; (8000de4 <HAL_RCC_OscConfig+0x338>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2202      	movs	r2, #2
 8000c82:	4013      	ands	r3, r2
 8000c84:	d0f1      	beq.n	8000c6a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c86:	4b57      	ldr	r3, [pc, #348]	; (8000de4 <HAL_RCC_OscConfig+0x338>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	22f8      	movs	r2, #248	; 0xf8
 8000c8c:	4393      	bics	r3, r2
 8000c8e:	0019      	movs	r1, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	691b      	ldr	r3, [r3, #16]
 8000c94:	00da      	lsls	r2, r3, #3
 8000c96:	4b53      	ldr	r3, [pc, #332]	; (8000de4 <HAL_RCC_OscConfig+0x338>)
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	e018      	b.n	8000cd0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c9e:	4b51      	ldr	r3, [pc, #324]	; (8000de4 <HAL_RCC_OscConfig+0x338>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	4b50      	ldr	r3, [pc, #320]	; (8000de4 <HAL_RCC_OscConfig+0x338>)
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	438a      	bics	r2, r1
 8000ca8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000caa:	f7ff fcc9 	bl	8000640 <HAL_GetTick>
 8000cae:	0003      	movs	r3, r0
 8000cb0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cb2:	e008      	b.n	8000cc6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cb4:	f7ff fcc4 	bl	8000640 <HAL_GetTick>
 8000cb8:	0002      	movs	r2, r0
 8000cba:	69bb      	ldr	r3, [r7, #24]
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	2b02      	cmp	r3, #2
 8000cc0:	d901      	bls.n	8000cc6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	e272      	b.n	80011ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cc6:	4b47      	ldr	r3, [pc, #284]	; (8000de4 <HAL_RCC_OscConfig+0x338>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2202      	movs	r2, #2
 8000ccc:	4013      	ands	r3, r2
 8000cce:	d1f1      	bne.n	8000cb4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2208      	movs	r2, #8
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	d036      	beq.n	8000d48 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	69db      	ldr	r3, [r3, #28]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d019      	beq.n	8000d16 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ce2:	4b40      	ldr	r3, [pc, #256]	; (8000de4 <HAL_RCC_OscConfig+0x338>)
 8000ce4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ce6:	4b3f      	ldr	r3, [pc, #252]	; (8000de4 <HAL_RCC_OscConfig+0x338>)
 8000ce8:	2101      	movs	r1, #1
 8000cea:	430a      	orrs	r2, r1
 8000cec:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cee:	f7ff fca7 	bl	8000640 <HAL_GetTick>
 8000cf2:	0003      	movs	r3, r0
 8000cf4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cf6:	e008      	b.n	8000d0a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cf8:	f7ff fca2 	bl	8000640 <HAL_GetTick>
 8000cfc:	0002      	movs	r2, r0
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	2b02      	cmp	r3, #2
 8000d04:	d901      	bls.n	8000d0a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8000d06:	2303      	movs	r3, #3
 8000d08:	e250      	b.n	80011ac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d0a:	4b36      	ldr	r3, [pc, #216]	; (8000de4 <HAL_RCC_OscConfig+0x338>)
 8000d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0e:	2202      	movs	r2, #2
 8000d10:	4013      	ands	r3, r2
 8000d12:	d0f1      	beq.n	8000cf8 <HAL_RCC_OscConfig+0x24c>
 8000d14:	e018      	b.n	8000d48 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d16:	4b33      	ldr	r3, [pc, #204]	; (8000de4 <HAL_RCC_OscConfig+0x338>)
 8000d18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d1a:	4b32      	ldr	r3, [pc, #200]	; (8000de4 <HAL_RCC_OscConfig+0x338>)
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	438a      	bics	r2, r1
 8000d20:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d22:	f7ff fc8d 	bl	8000640 <HAL_GetTick>
 8000d26:	0003      	movs	r3, r0
 8000d28:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d2a:	e008      	b.n	8000d3e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d2c:	f7ff fc88 	bl	8000640 <HAL_GetTick>
 8000d30:	0002      	movs	r2, r0
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d901      	bls.n	8000d3e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	e236      	b.n	80011ac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d3e:	4b29      	ldr	r3, [pc, #164]	; (8000de4 <HAL_RCC_OscConfig+0x338>)
 8000d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d42:	2202      	movs	r2, #2
 8000d44:	4013      	ands	r3, r2
 8000d46:	d1f1      	bne.n	8000d2c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2204      	movs	r2, #4
 8000d4e:	4013      	ands	r3, r2
 8000d50:	d100      	bne.n	8000d54 <HAL_RCC_OscConfig+0x2a8>
 8000d52:	e0b5      	b.n	8000ec0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d54:	201f      	movs	r0, #31
 8000d56:	183b      	adds	r3, r7, r0
 8000d58:	2200      	movs	r2, #0
 8000d5a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d5c:	4b21      	ldr	r3, [pc, #132]	; (8000de4 <HAL_RCC_OscConfig+0x338>)
 8000d5e:	69da      	ldr	r2, [r3, #28]
 8000d60:	2380      	movs	r3, #128	; 0x80
 8000d62:	055b      	lsls	r3, r3, #21
 8000d64:	4013      	ands	r3, r2
 8000d66:	d110      	bne.n	8000d8a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d68:	4b1e      	ldr	r3, [pc, #120]	; (8000de4 <HAL_RCC_OscConfig+0x338>)
 8000d6a:	69da      	ldr	r2, [r3, #28]
 8000d6c:	4b1d      	ldr	r3, [pc, #116]	; (8000de4 <HAL_RCC_OscConfig+0x338>)
 8000d6e:	2180      	movs	r1, #128	; 0x80
 8000d70:	0549      	lsls	r1, r1, #21
 8000d72:	430a      	orrs	r2, r1
 8000d74:	61da      	str	r2, [r3, #28]
 8000d76:	4b1b      	ldr	r3, [pc, #108]	; (8000de4 <HAL_RCC_OscConfig+0x338>)
 8000d78:	69da      	ldr	r2, [r3, #28]
 8000d7a:	2380      	movs	r3, #128	; 0x80
 8000d7c:	055b      	lsls	r3, r3, #21
 8000d7e:	4013      	ands	r3, r2
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000d84:	183b      	adds	r3, r7, r0
 8000d86:	2201      	movs	r2, #1
 8000d88:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d8a:	4b19      	ldr	r3, [pc, #100]	; (8000df0 <HAL_RCC_OscConfig+0x344>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	2380      	movs	r3, #128	; 0x80
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	4013      	ands	r3, r2
 8000d94:	d11a      	bne.n	8000dcc <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d96:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <HAL_RCC_OscConfig+0x344>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <HAL_RCC_OscConfig+0x344>)
 8000d9c:	2180      	movs	r1, #128	; 0x80
 8000d9e:	0049      	lsls	r1, r1, #1
 8000da0:	430a      	orrs	r2, r1
 8000da2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000da4:	f7ff fc4c 	bl	8000640 <HAL_GetTick>
 8000da8:	0003      	movs	r3, r0
 8000daa:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dac:	e008      	b.n	8000dc0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dae:	f7ff fc47 	bl	8000640 <HAL_GetTick>
 8000db2:	0002      	movs	r2, r0
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	2b64      	cmp	r3, #100	; 0x64
 8000dba:	d901      	bls.n	8000dc0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	e1f5      	b.n	80011ac <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <HAL_RCC_OscConfig+0x344>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	2380      	movs	r3, #128	; 0x80
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	4013      	ands	r3, r2
 8000dca:	d0f0      	beq.n	8000dae <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d10f      	bne.n	8000df4 <HAL_RCC_OscConfig+0x348>
 8000dd4:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <HAL_RCC_OscConfig+0x338>)
 8000dd6:	6a1a      	ldr	r2, [r3, #32]
 8000dd8:	4b02      	ldr	r3, [pc, #8]	; (8000de4 <HAL_RCC_OscConfig+0x338>)
 8000dda:	2101      	movs	r1, #1
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	621a      	str	r2, [r3, #32]
 8000de0:	e036      	b.n	8000e50 <HAL_RCC_OscConfig+0x3a4>
 8000de2:	46c0      	nop			; (mov r8, r8)
 8000de4:	40021000 	.word	0x40021000
 8000de8:	fffeffff 	.word	0xfffeffff
 8000dec:	fffbffff 	.word	0xfffbffff
 8000df0:	40007000 	.word	0x40007000
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d10c      	bne.n	8000e16 <HAL_RCC_OscConfig+0x36a>
 8000dfc:	4bca      	ldr	r3, [pc, #808]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8000dfe:	6a1a      	ldr	r2, [r3, #32]
 8000e00:	4bc9      	ldr	r3, [pc, #804]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8000e02:	2101      	movs	r1, #1
 8000e04:	438a      	bics	r2, r1
 8000e06:	621a      	str	r2, [r3, #32]
 8000e08:	4bc7      	ldr	r3, [pc, #796]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8000e0a:	6a1a      	ldr	r2, [r3, #32]
 8000e0c:	4bc6      	ldr	r3, [pc, #792]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8000e0e:	2104      	movs	r1, #4
 8000e10:	438a      	bics	r2, r1
 8000e12:	621a      	str	r2, [r3, #32]
 8000e14:	e01c      	b.n	8000e50 <HAL_RCC_OscConfig+0x3a4>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	2b05      	cmp	r3, #5
 8000e1c:	d10c      	bne.n	8000e38 <HAL_RCC_OscConfig+0x38c>
 8000e1e:	4bc2      	ldr	r3, [pc, #776]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8000e20:	6a1a      	ldr	r2, [r3, #32]
 8000e22:	4bc1      	ldr	r3, [pc, #772]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8000e24:	2104      	movs	r1, #4
 8000e26:	430a      	orrs	r2, r1
 8000e28:	621a      	str	r2, [r3, #32]
 8000e2a:	4bbf      	ldr	r3, [pc, #764]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8000e2c:	6a1a      	ldr	r2, [r3, #32]
 8000e2e:	4bbe      	ldr	r3, [pc, #760]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8000e30:	2101      	movs	r1, #1
 8000e32:	430a      	orrs	r2, r1
 8000e34:	621a      	str	r2, [r3, #32]
 8000e36:	e00b      	b.n	8000e50 <HAL_RCC_OscConfig+0x3a4>
 8000e38:	4bbb      	ldr	r3, [pc, #748]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8000e3a:	6a1a      	ldr	r2, [r3, #32]
 8000e3c:	4bba      	ldr	r3, [pc, #744]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8000e3e:	2101      	movs	r1, #1
 8000e40:	438a      	bics	r2, r1
 8000e42:	621a      	str	r2, [r3, #32]
 8000e44:	4bb8      	ldr	r3, [pc, #736]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8000e46:	6a1a      	ldr	r2, [r3, #32]
 8000e48:	4bb7      	ldr	r3, [pc, #732]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8000e4a:	2104      	movs	r1, #4
 8000e4c:	438a      	bics	r2, r1
 8000e4e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d014      	beq.n	8000e82 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e58:	f7ff fbf2 	bl	8000640 <HAL_GetTick>
 8000e5c:	0003      	movs	r3, r0
 8000e5e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e60:	e009      	b.n	8000e76 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e62:	f7ff fbed 	bl	8000640 <HAL_GetTick>
 8000e66:	0002      	movs	r2, r0
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	4aaf      	ldr	r2, [pc, #700]	; (800112c <HAL_RCC_OscConfig+0x680>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d901      	bls.n	8000e76 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8000e72:	2303      	movs	r3, #3
 8000e74:	e19a      	b.n	80011ac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e76:	4bac      	ldr	r3, [pc, #688]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8000e78:	6a1b      	ldr	r3, [r3, #32]
 8000e7a:	2202      	movs	r2, #2
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	d0f0      	beq.n	8000e62 <HAL_RCC_OscConfig+0x3b6>
 8000e80:	e013      	b.n	8000eaa <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e82:	f7ff fbdd 	bl	8000640 <HAL_GetTick>
 8000e86:	0003      	movs	r3, r0
 8000e88:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e8a:	e009      	b.n	8000ea0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e8c:	f7ff fbd8 	bl	8000640 <HAL_GetTick>
 8000e90:	0002      	movs	r2, r0
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	4aa5      	ldr	r2, [pc, #660]	; (800112c <HAL_RCC_OscConfig+0x680>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d901      	bls.n	8000ea0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	e185      	b.n	80011ac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ea0:	4ba1      	ldr	r3, [pc, #644]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8000ea2:	6a1b      	ldr	r3, [r3, #32]
 8000ea4:	2202      	movs	r2, #2
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	d1f0      	bne.n	8000e8c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000eaa:	231f      	movs	r3, #31
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d105      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000eb4:	4b9c      	ldr	r3, [pc, #624]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8000eb6:	69da      	ldr	r2, [r3, #28]
 8000eb8:	4b9b      	ldr	r3, [pc, #620]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8000eba:	499d      	ldr	r1, [pc, #628]	; (8001130 <HAL_RCC_OscConfig+0x684>)
 8000ebc:	400a      	ands	r2, r1
 8000ebe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2210      	movs	r2, #16
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	d063      	beq.n	8000f92 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d12a      	bne.n	8000f28 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000ed2:	4b95      	ldr	r3, [pc, #596]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8000ed4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ed6:	4b94      	ldr	r3, [pc, #592]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8000ed8:	2104      	movs	r1, #4
 8000eda:	430a      	orrs	r2, r1
 8000edc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000ede:	4b92      	ldr	r3, [pc, #584]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8000ee0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ee2:	4b91      	ldr	r3, [pc, #580]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	430a      	orrs	r2, r1
 8000ee8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eea:	f7ff fba9 	bl	8000640 <HAL_GetTick>
 8000eee:	0003      	movs	r3, r0
 8000ef0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000ef2:	e008      	b.n	8000f06 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000ef4:	f7ff fba4 	bl	8000640 <HAL_GetTick>
 8000ef8:	0002      	movs	r2, r0
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d901      	bls.n	8000f06 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8000f02:	2303      	movs	r3, #3
 8000f04:	e152      	b.n	80011ac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000f06:	4b88      	ldr	r3, [pc, #544]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8000f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f0a:	2202      	movs	r2, #2
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	d0f1      	beq.n	8000ef4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000f10:	4b85      	ldr	r3, [pc, #532]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8000f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f14:	22f8      	movs	r2, #248	; 0xf8
 8000f16:	4393      	bics	r3, r2
 8000f18:	0019      	movs	r1, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	00da      	lsls	r2, r3, #3
 8000f20:	4b81      	ldr	r3, [pc, #516]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8000f22:	430a      	orrs	r2, r1
 8000f24:	635a      	str	r2, [r3, #52]	; 0x34
 8000f26:	e034      	b.n	8000f92 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	695b      	ldr	r3, [r3, #20]
 8000f2c:	3305      	adds	r3, #5
 8000f2e:	d111      	bne.n	8000f54 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000f30:	4b7d      	ldr	r3, [pc, #500]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8000f32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f34:	4b7c      	ldr	r3, [pc, #496]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8000f36:	2104      	movs	r1, #4
 8000f38:	438a      	bics	r2, r1
 8000f3a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000f3c:	4b7a      	ldr	r3, [pc, #488]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8000f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f40:	22f8      	movs	r2, #248	; 0xf8
 8000f42:	4393      	bics	r3, r2
 8000f44:	0019      	movs	r1, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	699b      	ldr	r3, [r3, #24]
 8000f4a:	00da      	lsls	r2, r3, #3
 8000f4c:	4b76      	ldr	r3, [pc, #472]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	635a      	str	r2, [r3, #52]	; 0x34
 8000f52:	e01e      	b.n	8000f92 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000f54:	4b74      	ldr	r3, [pc, #464]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8000f56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f58:	4b73      	ldr	r3, [pc, #460]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8000f5a:	2104      	movs	r1, #4
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000f60:	4b71      	ldr	r3, [pc, #452]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8000f62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f64:	4b70      	ldr	r3, [pc, #448]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8000f66:	2101      	movs	r1, #1
 8000f68:	438a      	bics	r2, r1
 8000f6a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f6c:	f7ff fb68 	bl	8000640 <HAL_GetTick>
 8000f70:	0003      	movs	r3, r0
 8000f72:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000f74:	e008      	b.n	8000f88 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000f76:	f7ff fb63 	bl	8000640 <HAL_GetTick>
 8000f7a:	0002      	movs	r2, r0
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d901      	bls.n	8000f88 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8000f84:	2303      	movs	r3, #3
 8000f86:	e111      	b.n	80011ac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000f88:	4b67      	ldr	r3, [pc, #412]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8000f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f8c:	2202      	movs	r2, #2
 8000f8e:	4013      	ands	r3, r2
 8000f90:	d1f1      	bne.n	8000f76 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2220      	movs	r2, #32
 8000f98:	4013      	ands	r3, r2
 8000f9a:	d05c      	beq.n	8001056 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000f9c:	4b62      	ldr	r3, [pc, #392]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	220c      	movs	r2, #12
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	2b0c      	cmp	r3, #12
 8000fa6:	d00e      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000fa8:	4b5f      	ldr	r3, [pc, #380]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	220c      	movs	r2, #12
 8000fae:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000fb0:	2b08      	cmp	r3, #8
 8000fb2:	d114      	bne.n	8000fde <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000fb4:	4b5c      	ldr	r3, [pc, #368]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8000fb6:	685a      	ldr	r2, [r3, #4]
 8000fb8:	23c0      	movs	r3, #192	; 0xc0
 8000fba:	025b      	lsls	r3, r3, #9
 8000fbc:	401a      	ands	r2, r3
 8000fbe:	23c0      	movs	r3, #192	; 0xc0
 8000fc0:	025b      	lsls	r3, r3, #9
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d10b      	bne.n	8000fde <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8000fc6:	4b58      	ldr	r3, [pc, #352]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8000fc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fca:	2380      	movs	r3, #128	; 0x80
 8000fcc:	025b      	lsls	r3, r3, #9
 8000fce:	4013      	ands	r3, r2
 8000fd0:	d040      	beq.n	8001054 <HAL_RCC_OscConfig+0x5a8>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6a1b      	ldr	r3, [r3, #32]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d03c      	beq.n	8001054 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e0e6      	b.n	80011ac <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6a1b      	ldr	r3, [r3, #32]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d01b      	beq.n	800101e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8000fe6:	4b50      	ldr	r3, [pc, #320]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8000fe8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fea:	4b4f      	ldr	r3, [pc, #316]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8000fec:	2180      	movs	r1, #128	; 0x80
 8000fee:	0249      	lsls	r1, r1, #9
 8000ff0:	430a      	orrs	r2, r1
 8000ff2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff4:	f7ff fb24 	bl	8000640 <HAL_GetTick>
 8000ff8:	0003      	movs	r3, r0
 8000ffa:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000ffc:	e008      	b.n	8001010 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000ffe:	f7ff fb1f 	bl	8000640 <HAL_GetTick>
 8001002:	0002      	movs	r2, r0
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	2b02      	cmp	r3, #2
 800100a:	d901      	bls.n	8001010 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800100c:	2303      	movs	r3, #3
 800100e:	e0cd      	b.n	80011ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001010:	4b45      	ldr	r3, [pc, #276]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8001012:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001014:	2380      	movs	r3, #128	; 0x80
 8001016:	025b      	lsls	r3, r3, #9
 8001018:	4013      	ands	r3, r2
 800101a:	d0f0      	beq.n	8000ffe <HAL_RCC_OscConfig+0x552>
 800101c:	e01b      	b.n	8001056 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800101e:	4b42      	ldr	r3, [pc, #264]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8001020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001022:	4b41      	ldr	r3, [pc, #260]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8001024:	4943      	ldr	r1, [pc, #268]	; (8001134 <HAL_RCC_OscConfig+0x688>)
 8001026:	400a      	ands	r2, r1
 8001028:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800102a:	f7ff fb09 	bl	8000640 <HAL_GetTick>
 800102e:	0003      	movs	r3, r0
 8001030:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001032:	e008      	b.n	8001046 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001034:	f7ff fb04 	bl	8000640 <HAL_GetTick>
 8001038:	0002      	movs	r2, r0
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b02      	cmp	r3, #2
 8001040:	d901      	bls.n	8001046 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e0b2      	b.n	80011ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001046:	4b38      	ldr	r3, [pc, #224]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8001048:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800104a:	2380      	movs	r3, #128	; 0x80
 800104c:	025b      	lsls	r3, r3, #9
 800104e:	4013      	ands	r3, r2
 8001050:	d1f0      	bne.n	8001034 <HAL_RCC_OscConfig+0x588>
 8001052:	e000      	b.n	8001056 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001054:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105a:	2b00      	cmp	r3, #0
 800105c:	d100      	bne.n	8001060 <HAL_RCC_OscConfig+0x5b4>
 800105e:	e0a4      	b.n	80011aa <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001060:	4b31      	ldr	r3, [pc, #196]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	220c      	movs	r2, #12
 8001066:	4013      	ands	r3, r2
 8001068:	2b08      	cmp	r3, #8
 800106a:	d100      	bne.n	800106e <HAL_RCC_OscConfig+0x5c2>
 800106c:	e078      	b.n	8001160 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001072:	2b02      	cmp	r3, #2
 8001074:	d14c      	bne.n	8001110 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001076:	4b2c      	ldr	r3, [pc, #176]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	4b2b      	ldr	r3, [pc, #172]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 800107c:	492e      	ldr	r1, [pc, #184]	; (8001138 <HAL_RCC_OscConfig+0x68c>)
 800107e:	400a      	ands	r2, r1
 8001080:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001082:	f7ff fadd 	bl	8000640 <HAL_GetTick>
 8001086:	0003      	movs	r3, r0
 8001088:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800108a:	e008      	b.n	800109e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800108c:	f7ff fad8 	bl	8000640 <HAL_GetTick>
 8001090:	0002      	movs	r2, r0
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	2b02      	cmp	r3, #2
 8001098:	d901      	bls.n	800109e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e086      	b.n	80011ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800109e:	4b22      	ldr	r3, [pc, #136]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	2380      	movs	r3, #128	; 0x80
 80010a4:	049b      	lsls	r3, r3, #18
 80010a6:	4013      	ands	r3, r2
 80010a8:	d1f0      	bne.n	800108c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010aa:	4b1f      	ldr	r3, [pc, #124]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 80010ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ae:	220f      	movs	r2, #15
 80010b0:	4393      	bics	r3, r2
 80010b2:	0019      	movs	r1, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010b8:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 80010ba:	430a      	orrs	r2, r1
 80010bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80010be:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	4a1e      	ldr	r2, [pc, #120]	; (800113c <HAL_RCC_OscConfig+0x690>)
 80010c4:	4013      	ands	r3, r2
 80010c6:	0019      	movs	r1, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d0:	431a      	orrs	r2, r3
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 80010d4:	430a      	orrs	r2, r1
 80010d6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010d8:	4b13      	ldr	r3, [pc, #76]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 80010de:	2180      	movs	r1, #128	; 0x80
 80010e0:	0449      	lsls	r1, r1, #17
 80010e2:	430a      	orrs	r2, r1
 80010e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e6:	f7ff faab 	bl	8000640 <HAL_GetTick>
 80010ea:	0003      	movs	r3, r0
 80010ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010ee:	e008      	b.n	8001102 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010f0:	f7ff faa6 	bl	8000640 <HAL_GetTick>
 80010f4:	0002      	movs	r2, r0
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d901      	bls.n	8001102 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e054      	b.n	80011ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	2380      	movs	r3, #128	; 0x80
 8001108:	049b      	lsls	r3, r3, #18
 800110a:	4013      	ands	r3, r2
 800110c:	d0f0      	beq.n	80010f0 <HAL_RCC_OscConfig+0x644>
 800110e:	e04c      	b.n	80011aa <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4b04      	ldr	r3, [pc, #16]	; (8001128 <HAL_RCC_OscConfig+0x67c>)
 8001116:	4908      	ldr	r1, [pc, #32]	; (8001138 <HAL_RCC_OscConfig+0x68c>)
 8001118:	400a      	ands	r2, r1
 800111a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111c:	f7ff fa90 	bl	8000640 <HAL_GetTick>
 8001120:	0003      	movs	r3, r0
 8001122:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001124:	e015      	b.n	8001152 <HAL_RCC_OscConfig+0x6a6>
 8001126:	46c0      	nop			; (mov r8, r8)
 8001128:	40021000 	.word	0x40021000
 800112c:	00001388 	.word	0x00001388
 8001130:	efffffff 	.word	0xefffffff
 8001134:	fffeffff 	.word	0xfffeffff
 8001138:	feffffff 	.word	0xfeffffff
 800113c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001140:	f7ff fa7e 	bl	8000640 <HAL_GetTick>
 8001144:	0002      	movs	r2, r0
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2b02      	cmp	r3, #2
 800114c:	d901      	bls.n	8001152 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e02c      	b.n	80011ac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001152:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <HAL_RCC_OscConfig+0x708>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	2380      	movs	r3, #128	; 0x80
 8001158:	049b      	lsls	r3, r3, #18
 800115a:	4013      	ands	r3, r2
 800115c:	d1f0      	bne.n	8001140 <HAL_RCC_OscConfig+0x694>
 800115e:	e024      	b.n	80011aa <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001164:	2b01      	cmp	r3, #1
 8001166:	d101      	bne.n	800116c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e01f      	b.n	80011ac <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <HAL_RCC_OscConfig+0x708>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <HAL_RCC_OscConfig+0x708>)
 8001174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001176:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001178:	697a      	ldr	r2, [r7, #20]
 800117a:	23c0      	movs	r3, #192	; 0xc0
 800117c:	025b      	lsls	r3, r3, #9
 800117e:	401a      	ands	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001184:	429a      	cmp	r2, r3
 8001186:	d10e      	bne.n	80011a6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	220f      	movs	r2, #15
 800118c:	401a      	ands	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001192:	429a      	cmp	r2, r3
 8001194:	d107      	bne.n	80011a6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	23f0      	movs	r3, #240	; 0xf0
 800119a:	039b      	lsls	r3, r3, #14
 800119c:	401a      	ands	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d001      	beq.n	80011aa <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e000      	b.n	80011ac <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80011aa:	2300      	movs	r3, #0
}
 80011ac:	0018      	movs	r0, r3
 80011ae:	46bd      	mov	sp, r7
 80011b0:	b008      	add	sp, #32
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40021000 	.word	0x40021000

080011b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d101      	bne.n	80011cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e0bf      	b.n	800134c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011cc:	4b61      	ldr	r3, [pc, #388]	; (8001354 <HAL_RCC_ClockConfig+0x19c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2201      	movs	r2, #1
 80011d2:	4013      	ands	r3, r2
 80011d4:	683a      	ldr	r2, [r7, #0]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d911      	bls.n	80011fe <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011da:	4b5e      	ldr	r3, [pc, #376]	; (8001354 <HAL_RCC_ClockConfig+0x19c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2201      	movs	r2, #1
 80011e0:	4393      	bics	r3, r2
 80011e2:	0019      	movs	r1, r3
 80011e4:	4b5b      	ldr	r3, [pc, #364]	; (8001354 <HAL_RCC_ClockConfig+0x19c>)
 80011e6:	683a      	ldr	r2, [r7, #0]
 80011e8:	430a      	orrs	r2, r1
 80011ea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ec:	4b59      	ldr	r3, [pc, #356]	; (8001354 <HAL_RCC_ClockConfig+0x19c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2201      	movs	r2, #1
 80011f2:	4013      	ands	r3, r2
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d001      	beq.n	80011fe <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e0a6      	b.n	800134c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2202      	movs	r2, #2
 8001204:	4013      	ands	r3, r2
 8001206:	d015      	beq.n	8001234 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2204      	movs	r2, #4
 800120e:	4013      	ands	r3, r2
 8001210:	d006      	beq.n	8001220 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001212:	4b51      	ldr	r3, [pc, #324]	; (8001358 <HAL_RCC_ClockConfig+0x1a0>)
 8001214:	685a      	ldr	r2, [r3, #4]
 8001216:	4b50      	ldr	r3, [pc, #320]	; (8001358 <HAL_RCC_ClockConfig+0x1a0>)
 8001218:	21e0      	movs	r1, #224	; 0xe0
 800121a:	00c9      	lsls	r1, r1, #3
 800121c:	430a      	orrs	r2, r1
 800121e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001220:	4b4d      	ldr	r3, [pc, #308]	; (8001358 <HAL_RCC_ClockConfig+0x1a0>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	22f0      	movs	r2, #240	; 0xf0
 8001226:	4393      	bics	r3, r2
 8001228:	0019      	movs	r1, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	4b4a      	ldr	r3, [pc, #296]	; (8001358 <HAL_RCC_ClockConfig+0x1a0>)
 8001230:	430a      	orrs	r2, r1
 8001232:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2201      	movs	r2, #1
 800123a:	4013      	ands	r3, r2
 800123c:	d04c      	beq.n	80012d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d107      	bne.n	8001256 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001246:	4b44      	ldr	r3, [pc, #272]	; (8001358 <HAL_RCC_ClockConfig+0x1a0>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	2380      	movs	r3, #128	; 0x80
 800124c:	029b      	lsls	r3, r3, #10
 800124e:	4013      	ands	r3, r2
 8001250:	d120      	bne.n	8001294 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e07a      	b.n	800134c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	2b02      	cmp	r3, #2
 800125c:	d107      	bne.n	800126e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800125e:	4b3e      	ldr	r3, [pc, #248]	; (8001358 <HAL_RCC_ClockConfig+0x1a0>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	2380      	movs	r3, #128	; 0x80
 8001264:	049b      	lsls	r3, r3, #18
 8001266:	4013      	ands	r3, r2
 8001268:	d114      	bne.n	8001294 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e06e      	b.n	800134c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2b03      	cmp	r3, #3
 8001274:	d107      	bne.n	8001286 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001276:	4b38      	ldr	r3, [pc, #224]	; (8001358 <HAL_RCC_ClockConfig+0x1a0>)
 8001278:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800127a:	2380      	movs	r3, #128	; 0x80
 800127c:	025b      	lsls	r3, r3, #9
 800127e:	4013      	ands	r3, r2
 8001280:	d108      	bne.n	8001294 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e062      	b.n	800134c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001286:	4b34      	ldr	r3, [pc, #208]	; (8001358 <HAL_RCC_ClockConfig+0x1a0>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2202      	movs	r2, #2
 800128c:	4013      	ands	r3, r2
 800128e:	d101      	bne.n	8001294 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e05b      	b.n	800134c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001294:	4b30      	ldr	r3, [pc, #192]	; (8001358 <HAL_RCC_ClockConfig+0x1a0>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2203      	movs	r2, #3
 800129a:	4393      	bics	r3, r2
 800129c:	0019      	movs	r1, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685a      	ldr	r2, [r3, #4]
 80012a2:	4b2d      	ldr	r3, [pc, #180]	; (8001358 <HAL_RCC_ClockConfig+0x1a0>)
 80012a4:	430a      	orrs	r2, r1
 80012a6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012a8:	f7ff f9ca 	bl	8000640 <HAL_GetTick>
 80012ac:	0003      	movs	r3, r0
 80012ae:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012b0:	e009      	b.n	80012c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012b2:	f7ff f9c5 	bl	8000640 <HAL_GetTick>
 80012b6:	0002      	movs	r2, r0
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	4a27      	ldr	r2, [pc, #156]	; (800135c <HAL_RCC_ClockConfig+0x1a4>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e042      	b.n	800134c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012c6:	4b24      	ldr	r3, [pc, #144]	; (8001358 <HAL_RCC_ClockConfig+0x1a0>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	220c      	movs	r2, #12
 80012cc:	401a      	ands	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d1ec      	bne.n	80012b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012d8:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <HAL_RCC_ClockConfig+0x19c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2201      	movs	r2, #1
 80012de:	4013      	ands	r3, r2
 80012e0:	683a      	ldr	r2, [r7, #0]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d211      	bcs.n	800130a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012e6:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <HAL_RCC_ClockConfig+0x19c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2201      	movs	r2, #1
 80012ec:	4393      	bics	r3, r2
 80012ee:	0019      	movs	r1, r3
 80012f0:	4b18      	ldr	r3, [pc, #96]	; (8001354 <HAL_RCC_ClockConfig+0x19c>)
 80012f2:	683a      	ldr	r2, [r7, #0]
 80012f4:	430a      	orrs	r2, r1
 80012f6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012f8:	4b16      	ldr	r3, [pc, #88]	; (8001354 <HAL_RCC_ClockConfig+0x19c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2201      	movs	r2, #1
 80012fe:	4013      	ands	r3, r2
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	429a      	cmp	r2, r3
 8001304:	d001      	beq.n	800130a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e020      	b.n	800134c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2204      	movs	r2, #4
 8001310:	4013      	ands	r3, r2
 8001312:	d009      	beq.n	8001328 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001314:	4b10      	ldr	r3, [pc, #64]	; (8001358 <HAL_RCC_ClockConfig+0x1a0>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	4a11      	ldr	r2, [pc, #68]	; (8001360 <HAL_RCC_ClockConfig+0x1a8>)
 800131a:	4013      	ands	r3, r2
 800131c:	0019      	movs	r1, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	68da      	ldr	r2, [r3, #12]
 8001322:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <HAL_RCC_ClockConfig+0x1a0>)
 8001324:	430a      	orrs	r2, r1
 8001326:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001328:	f000 f820 	bl	800136c <HAL_RCC_GetSysClockFreq>
 800132c:	0001      	movs	r1, r0
 800132e:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <HAL_RCC_ClockConfig+0x1a0>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	091b      	lsrs	r3, r3, #4
 8001334:	220f      	movs	r2, #15
 8001336:	4013      	ands	r3, r2
 8001338:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <HAL_RCC_ClockConfig+0x1ac>)
 800133a:	5cd3      	ldrb	r3, [r2, r3]
 800133c:	000a      	movs	r2, r1
 800133e:	40da      	lsrs	r2, r3
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <HAL_RCC_ClockConfig+0x1b0>)
 8001342:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001344:	2003      	movs	r0, #3
 8001346:	f7ff f935 	bl	80005b4 <HAL_InitTick>
  
  return HAL_OK;
 800134a:	2300      	movs	r3, #0
}
 800134c:	0018      	movs	r0, r3
 800134e:	46bd      	mov	sp, r7
 8001350:	b004      	add	sp, #16
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40022000 	.word	0x40022000
 8001358:	40021000 	.word	0x40021000
 800135c:	00001388 	.word	0x00001388
 8001360:	fffff8ff 	.word	0xfffff8ff
 8001364:	080021e8 	.word	0x080021e8
 8001368:	20000000 	.word	0x20000000

0800136c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b08f      	sub	sp, #60	; 0x3c
 8001370:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001372:	2314      	movs	r3, #20
 8001374:	18fb      	adds	r3, r7, r3
 8001376:	4a38      	ldr	r2, [pc, #224]	; (8001458 <HAL_RCC_GetSysClockFreq+0xec>)
 8001378:	ca13      	ldmia	r2!, {r0, r1, r4}
 800137a:	c313      	stmia	r3!, {r0, r1, r4}
 800137c:	6812      	ldr	r2, [r2, #0]
 800137e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	4a36      	ldr	r2, [pc, #216]	; (800145c <HAL_RCC_GetSysClockFreq+0xf0>)
 8001384:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001386:	c313      	stmia	r3!, {r0, r1, r4}
 8001388:	6812      	ldr	r2, [r2, #0]
 800138a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800138c:	2300      	movs	r3, #0
 800138e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001390:	2300      	movs	r3, #0
 8001392:	62bb      	str	r3, [r7, #40]	; 0x28
 8001394:	2300      	movs	r3, #0
 8001396:	637b      	str	r3, [r7, #52]	; 0x34
 8001398:	2300      	movs	r3, #0
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800139c:	2300      	movs	r3, #0
 800139e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80013a0:	4b2f      	ldr	r3, [pc, #188]	; (8001460 <HAL_RCC_GetSysClockFreq+0xf4>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a8:	220c      	movs	r2, #12
 80013aa:	4013      	ands	r3, r2
 80013ac:	2b0c      	cmp	r3, #12
 80013ae:	d047      	beq.n	8001440 <HAL_RCC_GetSysClockFreq+0xd4>
 80013b0:	d849      	bhi.n	8001446 <HAL_RCC_GetSysClockFreq+0xda>
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	d002      	beq.n	80013bc <HAL_RCC_GetSysClockFreq+0x50>
 80013b6:	2b08      	cmp	r3, #8
 80013b8:	d003      	beq.n	80013c2 <HAL_RCC_GetSysClockFreq+0x56>
 80013ba:	e044      	b.n	8001446 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013bc:	4b29      	ldr	r3, [pc, #164]	; (8001464 <HAL_RCC_GetSysClockFreq+0xf8>)
 80013be:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80013c0:	e044      	b.n	800144c <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80013c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c4:	0c9b      	lsrs	r3, r3, #18
 80013c6:	220f      	movs	r2, #15
 80013c8:	4013      	ands	r3, r2
 80013ca:	2214      	movs	r2, #20
 80013cc:	18ba      	adds	r2, r7, r2
 80013ce:	5cd3      	ldrb	r3, [r2, r3]
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80013d2:	4b23      	ldr	r3, [pc, #140]	; (8001460 <HAL_RCC_GetSysClockFreq+0xf4>)
 80013d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d6:	220f      	movs	r2, #15
 80013d8:	4013      	ands	r3, r2
 80013da:	1d3a      	adds	r2, r7, #4
 80013dc:	5cd3      	ldrb	r3, [r2, r3]
 80013de:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80013e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013e2:	23c0      	movs	r3, #192	; 0xc0
 80013e4:	025b      	lsls	r3, r3, #9
 80013e6:	401a      	ands	r2, r3
 80013e8:	2380      	movs	r3, #128	; 0x80
 80013ea:	025b      	lsls	r3, r3, #9
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d109      	bne.n	8001404 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80013f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013f2:	481c      	ldr	r0, [pc, #112]	; (8001464 <HAL_RCC_GetSysClockFreq+0xf8>)
 80013f4:	f7fe fe88 	bl	8000108 <__udivsi3>
 80013f8:	0003      	movs	r3, r0
 80013fa:	001a      	movs	r2, r3
 80013fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fe:	4353      	muls	r3, r2
 8001400:	637b      	str	r3, [r7, #52]	; 0x34
 8001402:	e01a      	b.n	800143a <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001406:	23c0      	movs	r3, #192	; 0xc0
 8001408:	025b      	lsls	r3, r3, #9
 800140a:	401a      	ands	r2, r3
 800140c:	23c0      	movs	r3, #192	; 0xc0
 800140e:	025b      	lsls	r3, r3, #9
 8001410:	429a      	cmp	r2, r3
 8001412:	d109      	bne.n	8001428 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001414:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001416:	4814      	ldr	r0, [pc, #80]	; (8001468 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001418:	f7fe fe76 	bl	8000108 <__udivsi3>
 800141c:	0003      	movs	r3, r0
 800141e:	001a      	movs	r2, r3
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	4353      	muls	r3, r2
 8001424:	637b      	str	r3, [r7, #52]	; 0x34
 8001426:	e008      	b.n	800143a <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001428:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800142a:	480e      	ldr	r0, [pc, #56]	; (8001464 <HAL_RCC_GetSysClockFreq+0xf8>)
 800142c:	f7fe fe6c 	bl	8000108 <__udivsi3>
 8001430:	0003      	movs	r3, r0
 8001432:	001a      	movs	r2, r3
 8001434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001436:	4353      	muls	r3, r2
 8001438:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800143a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800143c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800143e:	e005      	b.n	800144c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001440:	4b09      	ldr	r3, [pc, #36]	; (8001468 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001442:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001444:	e002      	b.n	800144c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001446:	4b07      	ldr	r3, [pc, #28]	; (8001464 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001448:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800144a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800144c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800144e:	0018      	movs	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	b00f      	add	sp, #60	; 0x3c
 8001454:	bd90      	pop	{r4, r7, pc}
 8001456:	46c0      	nop			; (mov r8, r8)
 8001458:	080021c8 	.word	0x080021c8
 800145c:	080021d8 	.word	0x080021d8
 8001460:	40021000 	.word	0x40021000
 8001464:	007a1200 	.word	0x007a1200
 8001468:	02dc6c00 	.word	0x02dc6c00

0800146c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d101      	bne.n	800147e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e042      	b.n	8001504 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	223d      	movs	r2, #61	; 0x3d
 8001482:	5c9b      	ldrb	r3, [r3, r2]
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d107      	bne.n	800149a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	223c      	movs	r2, #60	; 0x3c
 800148e:	2100      	movs	r1, #0
 8001490:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	0018      	movs	r0, r3
 8001496:	f7fe ffd9 	bl	800044c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	223d      	movs	r2, #61	; 0x3d
 800149e:	2102      	movs	r1, #2
 80014a0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	3304      	adds	r3, #4
 80014aa:	0019      	movs	r1, r3
 80014ac:	0010      	movs	r0, r2
 80014ae:	f000 fa1f 	bl	80018f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2246      	movs	r2, #70	; 0x46
 80014b6:	2101      	movs	r1, #1
 80014b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	223e      	movs	r2, #62	; 0x3e
 80014be:	2101      	movs	r1, #1
 80014c0:	5499      	strb	r1, [r3, r2]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	223f      	movs	r2, #63	; 0x3f
 80014c6:	2101      	movs	r1, #1
 80014c8:	5499      	strb	r1, [r3, r2]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2240      	movs	r2, #64	; 0x40
 80014ce:	2101      	movs	r1, #1
 80014d0:	5499      	strb	r1, [r3, r2]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2241      	movs	r2, #65	; 0x41
 80014d6:	2101      	movs	r1, #1
 80014d8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2242      	movs	r2, #66	; 0x42
 80014de:	2101      	movs	r1, #1
 80014e0:	5499      	strb	r1, [r3, r2]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2243      	movs	r2, #67	; 0x43
 80014e6:	2101      	movs	r1, #1
 80014e8:	5499      	strb	r1, [r3, r2]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2244      	movs	r2, #68	; 0x44
 80014ee:	2101      	movs	r1, #1
 80014f0:	5499      	strb	r1, [r3, r2]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2245      	movs	r2, #69	; 0x45
 80014f6:	2101      	movs	r1, #1
 80014f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	223d      	movs	r2, #61	; 0x3d
 80014fe:	2101      	movs	r1, #1
 8001500:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001502:	2300      	movs	r3, #0
}
 8001504:	0018      	movs	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	b002      	add	sp, #8
 800150a:	bd80      	pop	{r7, pc}

0800150c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d101      	bne.n	800151e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e042      	b.n	80015a4 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	223d      	movs	r2, #61	; 0x3d
 8001522:	5c9b      	ldrb	r3, [r3, r2]
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2b00      	cmp	r3, #0
 8001528:	d107      	bne.n	800153a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	223c      	movs	r2, #60	; 0x3c
 800152e:	2100      	movs	r1, #0
 8001530:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	0018      	movs	r0, r3
 8001536:	f000 f839 	bl	80015ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	223d      	movs	r2, #61	; 0x3d
 800153e:	2102      	movs	r1, #2
 8001540:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3304      	adds	r3, #4
 800154a:	0019      	movs	r1, r3
 800154c:	0010      	movs	r0, r2
 800154e:	f000 f9cf 	bl	80018f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2246      	movs	r2, #70	; 0x46
 8001556:	2101      	movs	r1, #1
 8001558:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	223e      	movs	r2, #62	; 0x3e
 800155e:	2101      	movs	r1, #1
 8001560:	5499      	strb	r1, [r3, r2]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	223f      	movs	r2, #63	; 0x3f
 8001566:	2101      	movs	r1, #1
 8001568:	5499      	strb	r1, [r3, r2]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2240      	movs	r2, #64	; 0x40
 800156e:	2101      	movs	r1, #1
 8001570:	5499      	strb	r1, [r3, r2]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2241      	movs	r2, #65	; 0x41
 8001576:	2101      	movs	r1, #1
 8001578:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2242      	movs	r2, #66	; 0x42
 800157e:	2101      	movs	r1, #1
 8001580:	5499      	strb	r1, [r3, r2]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2243      	movs	r2, #67	; 0x43
 8001586:	2101      	movs	r1, #1
 8001588:	5499      	strb	r1, [r3, r2]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2244      	movs	r2, #68	; 0x44
 800158e:	2101      	movs	r1, #1
 8001590:	5499      	strb	r1, [r3, r2]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2245      	movs	r2, #69	; 0x45
 8001596:	2101      	movs	r1, #1
 8001598:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	223d      	movs	r2, #61	; 0x3d
 800159e:	2101      	movs	r1, #1
 80015a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	0018      	movs	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	b002      	add	sp, #8
 80015aa:	bd80      	pop	{r7, pc}

080015ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80015b4:	46c0      	nop			; (mov r8, r8)
 80015b6:	46bd      	mov	sp, r7
 80015b8:	b002      	add	sp, #8
 80015ba:	bd80      	pop	{r7, pc}

080015bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015c8:	2317      	movs	r3, #23
 80015ca:	18fb      	adds	r3, r7, r3
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	223c      	movs	r2, #60	; 0x3c
 80015d4:	5c9b      	ldrb	r3, [r3, r2]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d101      	bne.n	80015de <HAL_TIM_PWM_ConfigChannel+0x22>
 80015da:	2302      	movs	r3, #2
 80015dc:	e0ad      	b.n	800173a <HAL_TIM_PWM_ConfigChannel+0x17e>
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	223c      	movs	r2, #60	; 0x3c
 80015e2:	2101      	movs	r1, #1
 80015e4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b0c      	cmp	r3, #12
 80015ea:	d100      	bne.n	80015ee <HAL_TIM_PWM_ConfigChannel+0x32>
 80015ec:	e076      	b.n	80016dc <HAL_TIM_PWM_ConfigChannel+0x120>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b0c      	cmp	r3, #12
 80015f2:	d900      	bls.n	80015f6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80015f4:	e095      	b.n	8001722 <HAL_TIM_PWM_ConfigChannel+0x166>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2b08      	cmp	r3, #8
 80015fa:	d04e      	beq.n	800169a <HAL_TIM_PWM_ConfigChannel+0xde>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b08      	cmp	r3, #8
 8001600:	d900      	bls.n	8001604 <HAL_TIM_PWM_ConfigChannel+0x48>
 8001602:	e08e      	b.n	8001722 <HAL_TIM_PWM_ConfigChannel+0x166>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_TIM_PWM_ConfigChannel+0x56>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b04      	cmp	r3, #4
 800160e:	d021      	beq.n	8001654 <HAL_TIM_PWM_ConfigChannel+0x98>
 8001610:	e087      	b.n	8001722 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	0011      	movs	r1, r2
 800161a:	0018      	movs	r0, r3
 800161c:	f000 f9e8 	bl	80019f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	699a      	ldr	r2, [r3, #24]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2108      	movs	r1, #8
 800162c:	430a      	orrs	r2, r1
 800162e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	699a      	ldr	r2, [r3, #24]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2104      	movs	r1, #4
 800163c:	438a      	bics	r2, r1
 800163e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6999      	ldr	r1, [r3, #24]
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	691a      	ldr	r2, [r3, #16]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	430a      	orrs	r2, r1
 8001650:	619a      	str	r2, [r3, #24]
      break;
 8001652:	e06b      	b.n	800172c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	68ba      	ldr	r2, [r7, #8]
 800165a:	0011      	movs	r1, r2
 800165c:	0018      	movs	r0, r3
 800165e:	f000 fa4f 	bl	8001b00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	699a      	ldr	r2, [r3, #24]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2180      	movs	r1, #128	; 0x80
 800166e:	0109      	lsls	r1, r1, #4
 8001670:	430a      	orrs	r2, r1
 8001672:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	699a      	ldr	r2, [r3, #24]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4931      	ldr	r1, [pc, #196]	; (8001744 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001680:	400a      	ands	r2, r1
 8001682:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6999      	ldr	r1, [r3, #24]
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	021a      	lsls	r2, r3, #8
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	430a      	orrs	r2, r1
 8001696:	619a      	str	r2, [r3, #24]
      break;
 8001698:	e048      	b.n	800172c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	0011      	movs	r1, r2
 80016a2:	0018      	movs	r0, r3
 80016a4:	f000 fab0 	bl	8001c08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	69da      	ldr	r2, [r3, #28]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2108      	movs	r1, #8
 80016b4:	430a      	orrs	r2, r1
 80016b6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	69da      	ldr	r2, [r3, #28]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2104      	movs	r1, #4
 80016c4:	438a      	bics	r2, r1
 80016c6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	69d9      	ldr	r1, [r3, #28]
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	691a      	ldr	r2, [r3, #16]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	430a      	orrs	r2, r1
 80016d8:	61da      	str	r2, [r3, #28]
      break;
 80016da:	e027      	b.n	800172c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	68ba      	ldr	r2, [r7, #8]
 80016e2:	0011      	movs	r1, r2
 80016e4:	0018      	movs	r0, r3
 80016e6:	f000 fb15 	bl	8001d14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	69da      	ldr	r2, [r3, #28]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2180      	movs	r1, #128	; 0x80
 80016f6:	0109      	lsls	r1, r1, #4
 80016f8:	430a      	orrs	r2, r1
 80016fa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	69da      	ldr	r2, [r3, #28]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	490f      	ldr	r1, [pc, #60]	; (8001744 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001708:	400a      	ands	r2, r1
 800170a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	69d9      	ldr	r1, [r3, #28]
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	021a      	lsls	r2, r3, #8
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	430a      	orrs	r2, r1
 800171e:	61da      	str	r2, [r3, #28]
      break;
 8001720:	e004      	b.n	800172c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8001722:	2317      	movs	r3, #23
 8001724:	18fb      	adds	r3, r7, r3
 8001726:	2201      	movs	r2, #1
 8001728:	701a      	strb	r2, [r3, #0]
      break;
 800172a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	223c      	movs	r2, #60	; 0x3c
 8001730:	2100      	movs	r1, #0
 8001732:	5499      	strb	r1, [r3, r2]

  return status;
 8001734:	2317      	movs	r3, #23
 8001736:	18fb      	adds	r3, r7, r3
 8001738:	781b      	ldrb	r3, [r3, #0]
}
 800173a:	0018      	movs	r0, r3
 800173c:	46bd      	mov	sp, r7
 800173e:	b006      	add	sp, #24
 8001740:	bd80      	pop	{r7, pc}
 8001742:	46c0      	nop			; (mov r8, r8)
 8001744:	fffffbff 	.word	0xfffffbff

08001748 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001752:	230f      	movs	r3, #15
 8001754:	18fb      	adds	r3, r7, r3
 8001756:	2200      	movs	r2, #0
 8001758:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	223c      	movs	r2, #60	; 0x3c
 800175e:	5c9b      	ldrb	r3, [r3, r2]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d101      	bne.n	8001768 <HAL_TIM_ConfigClockSource+0x20>
 8001764:	2302      	movs	r3, #2
 8001766:	e0bc      	b.n	80018e2 <HAL_TIM_ConfigClockSource+0x19a>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	223c      	movs	r2, #60	; 0x3c
 800176c:	2101      	movs	r1, #1
 800176e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	223d      	movs	r2, #61	; 0x3d
 8001774:	2102      	movs	r1, #2
 8001776:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	2277      	movs	r2, #119	; 0x77
 8001784:	4393      	bics	r3, r2
 8001786:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	4a58      	ldr	r2, [pc, #352]	; (80018ec <HAL_TIM_ConfigClockSource+0x1a4>)
 800178c:	4013      	ands	r3, r2
 800178e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	68ba      	ldr	r2, [r7, #8]
 8001796:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2280      	movs	r2, #128	; 0x80
 800179e:	0192      	lsls	r2, r2, #6
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d040      	beq.n	8001826 <HAL_TIM_ConfigClockSource+0xde>
 80017a4:	2280      	movs	r2, #128	; 0x80
 80017a6:	0192      	lsls	r2, r2, #6
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d900      	bls.n	80017ae <HAL_TIM_ConfigClockSource+0x66>
 80017ac:	e088      	b.n	80018c0 <HAL_TIM_ConfigClockSource+0x178>
 80017ae:	2280      	movs	r2, #128	; 0x80
 80017b0:	0152      	lsls	r2, r2, #5
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d100      	bne.n	80017b8 <HAL_TIM_ConfigClockSource+0x70>
 80017b6:	e088      	b.n	80018ca <HAL_TIM_ConfigClockSource+0x182>
 80017b8:	2280      	movs	r2, #128	; 0x80
 80017ba:	0152      	lsls	r2, r2, #5
 80017bc:	4293      	cmp	r3, r2
 80017be:	d900      	bls.n	80017c2 <HAL_TIM_ConfigClockSource+0x7a>
 80017c0:	e07e      	b.n	80018c0 <HAL_TIM_ConfigClockSource+0x178>
 80017c2:	2b70      	cmp	r3, #112	; 0x70
 80017c4:	d018      	beq.n	80017f8 <HAL_TIM_ConfigClockSource+0xb0>
 80017c6:	d900      	bls.n	80017ca <HAL_TIM_ConfigClockSource+0x82>
 80017c8:	e07a      	b.n	80018c0 <HAL_TIM_ConfigClockSource+0x178>
 80017ca:	2b60      	cmp	r3, #96	; 0x60
 80017cc:	d04f      	beq.n	800186e <HAL_TIM_ConfigClockSource+0x126>
 80017ce:	d900      	bls.n	80017d2 <HAL_TIM_ConfigClockSource+0x8a>
 80017d0:	e076      	b.n	80018c0 <HAL_TIM_ConfigClockSource+0x178>
 80017d2:	2b50      	cmp	r3, #80	; 0x50
 80017d4:	d03b      	beq.n	800184e <HAL_TIM_ConfigClockSource+0x106>
 80017d6:	d900      	bls.n	80017da <HAL_TIM_ConfigClockSource+0x92>
 80017d8:	e072      	b.n	80018c0 <HAL_TIM_ConfigClockSource+0x178>
 80017da:	2b40      	cmp	r3, #64	; 0x40
 80017dc:	d057      	beq.n	800188e <HAL_TIM_ConfigClockSource+0x146>
 80017de:	d900      	bls.n	80017e2 <HAL_TIM_ConfigClockSource+0x9a>
 80017e0:	e06e      	b.n	80018c0 <HAL_TIM_ConfigClockSource+0x178>
 80017e2:	2b30      	cmp	r3, #48	; 0x30
 80017e4:	d063      	beq.n	80018ae <HAL_TIM_ConfigClockSource+0x166>
 80017e6:	d86b      	bhi.n	80018c0 <HAL_TIM_ConfigClockSource+0x178>
 80017e8:	2b20      	cmp	r3, #32
 80017ea:	d060      	beq.n	80018ae <HAL_TIM_ConfigClockSource+0x166>
 80017ec:	d868      	bhi.n	80018c0 <HAL_TIM_ConfigClockSource+0x178>
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d05d      	beq.n	80018ae <HAL_TIM_ConfigClockSource+0x166>
 80017f2:	2b10      	cmp	r3, #16
 80017f4:	d05b      	beq.n	80018ae <HAL_TIM_ConfigClockSource+0x166>
 80017f6:	e063      	b.n	80018c0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6818      	ldr	r0, [r3, #0]
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	6899      	ldr	r1, [r3, #8]
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	f000 fb68 	bl	8001edc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	2277      	movs	r2, #119	; 0x77
 8001818:	4313      	orrs	r3, r2
 800181a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	68ba      	ldr	r2, [r7, #8]
 8001822:	609a      	str	r2, [r3, #8]
      break;
 8001824:	e052      	b.n	80018cc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6818      	ldr	r0, [r3, #0]
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	6899      	ldr	r1, [r3, #8]
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	f000 fb51 	bl	8001edc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2180      	movs	r1, #128	; 0x80
 8001846:	01c9      	lsls	r1, r1, #7
 8001848:	430a      	orrs	r2, r1
 800184a:	609a      	str	r2, [r3, #8]
      break;
 800184c:	e03e      	b.n	80018cc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6818      	ldr	r0, [r3, #0]
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	6859      	ldr	r1, [r3, #4]
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	001a      	movs	r2, r3
 800185c:	f000 fac4 	bl	8001de8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2150      	movs	r1, #80	; 0x50
 8001866:	0018      	movs	r0, r3
 8001868:	f000 fb1e 	bl	8001ea8 <TIM_ITRx_SetConfig>
      break;
 800186c:	e02e      	b.n	80018cc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6818      	ldr	r0, [r3, #0]
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	6859      	ldr	r1, [r3, #4]
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	001a      	movs	r2, r3
 800187c:	f000 fae2 	bl	8001e44 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2160      	movs	r1, #96	; 0x60
 8001886:	0018      	movs	r0, r3
 8001888:	f000 fb0e 	bl	8001ea8 <TIM_ITRx_SetConfig>
      break;
 800188c:	e01e      	b.n	80018cc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6818      	ldr	r0, [r3, #0]
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	6859      	ldr	r1, [r3, #4]
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	001a      	movs	r2, r3
 800189c:	f000 faa4 	bl	8001de8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2140      	movs	r1, #64	; 0x40
 80018a6:	0018      	movs	r0, r3
 80018a8:	f000 fafe 	bl	8001ea8 <TIM_ITRx_SetConfig>
      break;
 80018ac:	e00e      	b.n	80018cc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	0019      	movs	r1, r3
 80018b8:	0010      	movs	r0, r2
 80018ba:	f000 faf5 	bl	8001ea8 <TIM_ITRx_SetConfig>
      break;
 80018be:	e005      	b.n	80018cc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80018c0:	230f      	movs	r3, #15
 80018c2:	18fb      	adds	r3, r7, r3
 80018c4:	2201      	movs	r2, #1
 80018c6:	701a      	strb	r2, [r3, #0]
      break;
 80018c8:	e000      	b.n	80018cc <HAL_TIM_ConfigClockSource+0x184>
      break;
 80018ca:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	223d      	movs	r2, #61	; 0x3d
 80018d0:	2101      	movs	r1, #1
 80018d2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	223c      	movs	r2, #60	; 0x3c
 80018d8:	2100      	movs	r1, #0
 80018da:	5499      	strb	r1, [r3, r2]

  return status;
 80018dc:	230f      	movs	r3, #15
 80018de:	18fb      	adds	r3, r7, r3
 80018e0:	781b      	ldrb	r3, [r3, #0]
}
 80018e2:	0018      	movs	r0, r3
 80018e4:	46bd      	mov	sp, r7
 80018e6:	b004      	add	sp, #16
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	46c0      	nop			; (mov r8, r8)
 80018ec:	ffff00ff 	.word	0xffff00ff

080018f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a34      	ldr	r2, [pc, #208]	; (80019d4 <TIM_Base_SetConfig+0xe4>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d008      	beq.n	800191a <TIM_Base_SetConfig+0x2a>
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	2380      	movs	r3, #128	; 0x80
 800190c:	05db      	lsls	r3, r3, #23
 800190e:	429a      	cmp	r2, r3
 8001910:	d003      	beq.n	800191a <TIM_Base_SetConfig+0x2a>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a30      	ldr	r2, [pc, #192]	; (80019d8 <TIM_Base_SetConfig+0xe8>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d108      	bne.n	800192c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2270      	movs	r2, #112	; 0x70
 800191e:	4393      	bics	r3, r2
 8001920:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	4313      	orrs	r3, r2
 800192a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a29      	ldr	r2, [pc, #164]	; (80019d4 <TIM_Base_SetConfig+0xe4>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d018      	beq.n	8001966 <TIM_Base_SetConfig+0x76>
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	2380      	movs	r3, #128	; 0x80
 8001938:	05db      	lsls	r3, r3, #23
 800193a:	429a      	cmp	r2, r3
 800193c:	d013      	beq.n	8001966 <TIM_Base_SetConfig+0x76>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a25      	ldr	r2, [pc, #148]	; (80019d8 <TIM_Base_SetConfig+0xe8>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d00f      	beq.n	8001966 <TIM_Base_SetConfig+0x76>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a24      	ldr	r2, [pc, #144]	; (80019dc <TIM_Base_SetConfig+0xec>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d00b      	beq.n	8001966 <TIM_Base_SetConfig+0x76>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a23      	ldr	r2, [pc, #140]	; (80019e0 <TIM_Base_SetConfig+0xf0>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d007      	beq.n	8001966 <TIM_Base_SetConfig+0x76>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a22      	ldr	r2, [pc, #136]	; (80019e4 <TIM_Base_SetConfig+0xf4>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d003      	beq.n	8001966 <TIM_Base_SetConfig+0x76>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a21      	ldr	r2, [pc, #132]	; (80019e8 <TIM_Base_SetConfig+0xf8>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d108      	bne.n	8001978 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	4a20      	ldr	r2, [pc, #128]	; (80019ec <TIM_Base_SetConfig+0xfc>)
 800196a:	4013      	ands	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	4313      	orrs	r3, r2
 8001976:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2280      	movs	r2, #128	; 0x80
 800197c:	4393      	bics	r3, r2
 800197e:	001a      	movs	r2, r3
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	695b      	ldr	r3, [r3, #20]
 8001984:	4313      	orrs	r3, r2
 8001986:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	689a      	ldr	r2, [r3, #8]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a0c      	ldr	r2, [pc, #48]	; (80019d4 <TIM_Base_SetConfig+0xe4>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d00b      	beq.n	80019be <TIM_Base_SetConfig+0xce>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a0d      	ldr	r2, [pc, #52]	; (80019e0 <TIM_Base_SetConfig+0xf0>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d007      	beq.n	80019be <TIM_Base_SetConfig+0xce>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a0c      	ldr	r2, [pc, #48]	; (80019e4 <TIM_Base_SetConfig+0xf4>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d003      	beq.n	80019be <TIM_Base_SetConfig+0xce>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a0b      	ldr	r2, [pc, #44]	; (80019e8 <TIM_Base_SetConfig+0xf8>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d103      	bne.n	80019c6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	691a      	ldr	r2, [r3, #16]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2201      	movs	r2, #1
 80019ca:	615a      	str	r2, [r3, #20]
}
 80019cc:	46c0      	nop			; (mov r8, r8)
 80019ce:	46bd      	mov	sp, r7
 80019d0:	b004      	add	sp, #16
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40012c00 	.word	0x40012c00
 80019d8:	40000400 	.word	0x40000400
 80019dc:	40002000 	.word	0x40002000
 80019e0:	40014000 	.word	0x40014000
 80019e4:	40014400 	.word	0x40014400
 80019e8:	40014800 	.word	0x40014800
 80019ec:	fffffcff 	.word	0xfffffcff

080019f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	2201      	movs	r2, #1
 8001a00:	4393      	bics	r3, r2
 8001a02:	001a      	movs	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2270      	movs	r2, #112	; 0x70
 8001a1e:	4393      	bics	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2203      	movs	r2, #3
 8001a26:	4393      	bics	r3, r2
 8001a28:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	2202      	movs	r2, #2
 8001a38:	4393      	bics	r3, r2
 8001a3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	697a      	ldr	r2, [r7, #20]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a27      	ldr	r2, [pc, #156]	; (8001ae8 <TIM_OC1_SetConfig+0xf8>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d00b      	beq.n	8001a66 <TIM_OC1_SetConfig+0x76>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a26      	ldr	r2, [pc, #152]	; (8001aec <TIM_OC1_SetConfig+0xfc>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d007      	beq.n	8001a66 <TIM_OC1_SetConfig+0x76>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a25      	ldr	r2, [pc, #148]	; (8001af0 <TIM_OC1_SetConfig+0x100>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d003      	beq.n	8001a66 <TIM_OC1_SetConfig+0x76>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a24      	ldr	r2, [pc, #144]	; (8001af4 <TIM_OC1_SetConfig+0x104>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d10c      	bne.n	8001a80 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	2208      	movs	r2, #8
 8001a6a:	4393      	bics	r3, r2
 8001a6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	2204      	movs	r2, #4
 8001a7c:	4393      	bics	r3, r2
 8001a7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a19      	ldr	r2, [pc, #100]	; (8001ae8 <TIM_OC1_SetConfig+0xf8>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d00b      	beq.n	8001aa0 <TIM_OC1_SetConfig+0xb0>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a18      	ldr	r2, [pc, #96]	; (8001aec <TIM_OC1_SetConfig+0xfc>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d007      	beq.n	8001aa0 <TIM_OC1_SetConfig+0xb0>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4a17      	ldr	r2, [pc, #92]	; (8001af0 <TIM_OC1_SetConfig+0x100>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d003      	beq.n	8001aa0 <TIM_OC1_SetConfig+0xb0>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4a16      	ldr	r2, [pc, #88]	; (8001af4 <TIM_OC1_SetConfig+0x104>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d111      	bne.n	8001ac4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	4a15      	ldr	r2, [pc, #84]	; (8001af8 <TIM_OC1_SetConfig+0x108>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	4a14      	ldr	r2, [pc, #80]	; (8001afc <TIM_OC1_SetConfig+0x10c>)
 8001aac:	4013      	ands	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	695b      	ldr	r3, [r3, #20]
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	697a      	ldr	r2, [r7, #20]
 8001adc:	621a      	str	r2, [r3, #32]
}
 8001ade:	46c0      	nop			; (mov r8, r8)
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	b006      	add	sp, #24
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	46c0      	nop			; (mov r8, r8)
 8001ae8:	40012c00 	.word	0x40012c00
 8001aec:	40014000 	.word	0x40014000
 8001af0:	40014400 	.word	0x40014400
 8001af4:	40014800 	.word	0x40014800
 8001af8:	fffffeff 	.word	0xfffffeff
 8001afc:	fffffdff 	.word	0xfffffdff

08001b00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a1b      	ldr	r3, [r3, #32]
 8001b0e:	2210      	movs	r2, #16
 8001b10:	4393      	bics	r3, r2
 8001b12:	001a      	movs	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a1b      	ldr	r3, [r3, #32]
 8001b1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	4a2e      	ldr	r2, [pc, #184]	; (8001be8 <TIM_OC2_SetConfig+0xe8>)
 8001b2e:	4013      	ands	r3, r2
 8001b30:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	4a2d      	ldr	r2, [pc, #180]	; (8001bec <TIM_OC2_SetConfig+0xec>)
 8001b36:	4013      	ands	r3, r2
 8001b38:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	021b      	lsls	r3, r3, #8
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	2220      	movs	r2, #32
 8001b4a:	4393      	bics	r3, r2
 8001b4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	011b      	lsls	r3, r3, #4
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a24      	ldr	r2, [pc, #144]	; (8001bf0 <TIM_OC2_SetConfig+0xf0>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d10d      	bne.n	8001b7e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	2280      	movs	r2, #128	; 0x80
 8001b66:	4393      	bics	r3, r2
 8001b68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	011b      	lsls	r3, r3, #4
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	2240      	movs	r2, #64	; 0x40
 8001b7a:	4393      	bics	r3, r2
 8001b7c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a1b      	ldr	r2, [pc, #108]	; (8001bf0 <TIM_OC2_SetConfig+0xf0>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d00b      	beq.n	8001b9e <TIM_OC2_SetConfig+0x9e>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a1a      	ldr	r2, [pc, #104]	; (8001bf4 <TIM_OC2_SetConfig+0xf4>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d007      	beq.n	8001b9e <TIM_OC2_SetConfig+0x9e>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a19      	ldr	r2, [pc, #100]	; (8001bf8 <TIM_OC2_SetConfig+0xf8>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d003      	beq.n	8001b9e <TIM_OC2_SetConfig+0x9e>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a18      	ldr	r2, [pc, #96]	; (8001bfc <TIM_OC2_SetConfig+0xfc>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d113      	bne.n	8001bc6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	4a17      	ldr	r2, [pc, #92]	; (8001c00 <TIM_OC2_SetConfig+0x100>)
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	4a16      	ldr	r2, [pc, #88]	; (8001c04 <TIM_OC2_SetConfig+0x104>)
 8001baa:	4013      	ands	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685a      	ldr	r2, [r3, #4]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	621a      	str	r2, [r3, #32]
}
 8001be0:	46c0      	nop			; (mov r8, r8)
 8001be2:	46bd      	mov	sp, r7
 8001be4:	b006      	add	sp, #24
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	ffff8fff 	.word	0xffff8fff
 8001bec:	fffffcff 	.word	0xfffffcff
 8001bf0:	40012c00 	.word	0x40012c00
 8001bf4:	40014000 	.word	0x40014000
 8001bf8:	40014400 	.word	0x40014400
 8001bfc:	40014800 	.word	0x40014800
 8001c00:	fffffbff 	.word	0xfffffbff
 8001c04:	fffff7ff 	.word	0xfffff7ff

08001c08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	4a35      	ldr	r2, [pc, #212]	; (8001cec <TIM_OC3_SetConfig+0xe4>)
 8001c18:	401a      	ands	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2270      	movs	r2, #112	; 0x70
 8001c34:	4393      	bics	r3, r2
 8001c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2203      	movs	r2, #3
 8001c3c:	4393      	bics	r3, r2
 8001c3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	4a28      	ldr	r2, [pc, #160]	; (8001cf0 <TIM_OC3_SetConfig+0xe8>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	021b      	lsls	r3, r3, #8
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a24      	ldr	r2, [pc, #144]	; (8001cf4 <TIM_OC3_SetConfig+0xec>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d10d      	bne.n	8001c82 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	4a23      	ldr	r2, [pc, #140]	; (8001cf8 <TIM_OC3_SetConfig+0xf0>)
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	021b      	lsls	r3, r3, #8
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	4a1f      	ldr	r2, [pc, #124]	; (8001cfc <TIM_OC3_SetConfig+0xf4>)
 8001c7e:	4013      	ands	r3, r2
 8001c80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a1b      	ldr	r2, [pc, #108]	; (8001cf4 <TIM_OC3_SetConfig+0xec>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d00b      	beq.n	8001ca2 <TIM_OC3_SetConfig+0x9a>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a1c      	ldr	r2, [pc, #112]	; (8001d00 <TIM_OC3_SetConfig+0xf8>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d007      	beq.n	8001ca2 <TIM_OC3_SetConfig+0x9a>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a1b      	ldr	r2, [pc, #108]	; (8001d04 <TIM_OC3_SetConfig+0xfc>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d003      	beq.n	8001ca2 <TIM_OC3_SetConfig+0x9a>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a1a      	ldr	r2, [pc, #104]	; (8001d08 <TIM_OC3_SetConfig+0x100>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d113      	bne.n	8001cca <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	4a19      	ldr	r2, [pc, #100]	; (8001d0c <TIM_OC3_SetConfig+0x104>)
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	4a18      	ldr	r2, [pc, #96]	; (8001d10 <TIM_OC3_SetConfig+0x108>)
 8001cae:	4013      	ands	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	011b      	lsls	r3, r3, #4
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	011b      	lsls	r3, r3, #4
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	697a      	ldr	r2, [r7, #20]
 8001ce2:	621a      	str	r2, [r3, #32]
}
 8001ce4:	46c0      	nop			; (mov r8, r8)
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	b006      	add	sp, #24
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	fffffeff 	.word	0xfffffeff
 8001cf0:	fffffdff 	.word	0xfffffdff
 8001cf4:	40012c00 	.word	0x40012c00
 8001cf8:	fffff7ff 	.word	0xfffff7ff
 8001cfc:	fffffbff 	.word	0xfffffbff
 8001d00:	40014000 	.word	0x40014000
 8001d04:	40014400 	.word	0x40014400
 8001d08:	40014800 	.word	0x40014800
 8001d0c:	ffffefff 	.word	0xffffefff
 8001d10:	ffffdfff 	.word	0xffffdfff

08001d14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a1b      	ldr	r3, [r3, #32]
 8001d22:	4a28      	ldr	r2, [pc, #160]	; (8001dc4 <TIM_OC4_SetConfig+0xb0>)
 8001d24:	401a      	ands	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a1b      	ldr	r3, [r3, #32]
 8001d2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	4a22      	ldr	r2, [pc, #136]	; (8001dc8 <TIM_OC4_SetConfig+0xb4>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4a21      	ldr	r2, [pc, #132]	; (8001dcc <TIM_OC4_SetConfig+0xb8>)
 8001d48:	4013      	ands	r3, r2
 8001d4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	021b      	lsls	r3, r3, #8
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	4a1d      	ldr	r2, [pc, #116]	; (8001dd0 <TIM_OC4_SetConfig+0xbc>)
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	031b      	lsls	r3, r3, #12
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a19      	ldr	r2, [pc, #100]	; (8001dd4 <TIM_OC4_SetConfig+0xc0>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d00b      	beq.n	8001d8c <TIM_OC4_SetConfig+0x78>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a18      	ldr	r2, [pc, #96]	; (8001dd8 <TIM_OC4_SetConfig+0xc4>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d007      	beq.n	8001d8c <TIM_OC4_SetConfig+0x78>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a17      	ldr	r2, [pc, #92]	; (8001ddc <TIM_OC4_SetConfig+0xc8>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d003      	beq.n	8001d8c <TIM_OC4_SetConfig+0x78>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a16      	ldr	r2, [pc, #88]	; (8001de0 <TIM_OC4_SetConfig+0xcc>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d109      	bne.n	8001da0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	4a15      	ldr	r2, [pc, #84]	; (8001de4 <TIM_OC4_SetConfig+0xd0>)
 8001d90:	4013      	ands	r3, r2
 8001d92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	019b      	lsls	r3, r3, #6
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	621a      	str	r2, [r3, #32]
}
 8001dba:	46c0      	nop			; (mov r8, r8)
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	b006      	add	sp, #24
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	46c0      	nop			; (mov r8, r8)
 8001dc4:	ffffefff 	.word	0xffffefff
 8001dc8:	ffff8fff 	.word	0xffff8fff
 8001dcc:	fffffcff 	.word	0xfffffcff
 8001dd0:	ffffdfff 	.word	0xffffdfff
 8001dd4:	40012c00 	.word	0x40012c00
 8001dd8:	40014000 	.word	0x40014000
 8001ddc:	40014400 	.word	0x40014400
 8001de0:	40014800 	.word	0x40014800
 8001de4:	ffffbfff 	.word	0xffffbfff

08001de8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	4393      	bics	r3, r2
 8001e02:	001a      	movs	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	22f0      	movs	r2, #240	; 0xf0
 8001e12:	4393      	bics	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	011b      	lsls	r3, r3, #4
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	220a      	movs	r2, #10
 8001e24:	4393      	bics	r3, r2
 8001e26:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	621a      	str	r2, [r3, #32]
}
 8001e3c:	46c0      	nop			; (mov r8, r8)
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	b006      	add	sp, #24
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	2210      	movs	r2, #16
 8001e56:	4393      	bics	r3, r2
 8001e58:	001a      	movs	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	4a0d      	ldr	r2, [pc, #52]	; (8001ea4 <TIM_TI2_ConfigInputStage+0x60>)
 8001e6e:	4013      	ands	r3, r2
 8001e70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	031b      	lsls	r3, r3, #12
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	22a0      	movs	r2, #160	; 0xa0
 8001e80:	4393      	bics	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	011b      	lsls	r3, r3, #4
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	621a      	str	r2, [r3, #32]
}
 8001e9a:	46c0      	nop			; (mov r8, r8)
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	b006      	add	sp, #24
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	46c0      	nop			; (mov r8, r8)
 8001ea4:	ffff0fff 	.word	0xffff0fff

08001ea8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2270      	movs	r2, #112	; 0x70
 8001ebc:	4393      	bics	r3, r2
 8001ebe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	2207      	movs	r2, #7
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	609a      	str	r2, [r3, #8]
}
 8001ed2:	46c0      	nop			; (mov r8, r8)
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	b004      	add	sp, #16
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
 8001ee8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	4a09      	ldr	r2, [pc, #36]	; (8001f18 <TIM_ETR_SetConfig+0x3c>)
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	021a      	lsls	r2, r3, #8
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	431a      	orrs	r2, r3
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	697a      	ldr	r2, [r7, #20]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	697a      	ldr	r2, [r7, #20]
 8001f0e:	609a      	str	r2, [r3, #8]
}
 8001f10:	46c0      	nop			; (mov r8, r8)
 8001f12:	46bd      	mov	sp, r7
 8001f14:	b006      	add	sp, #24
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	ffff00ff 	.word	0xffff00ff

08001f1c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d108      	bne.n	8001f3e <HAL_TIMEx_PWMN_Start+0x22>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2242      	movs	r2, #66	; 0x42
 8001f30:	5c9b      	ldrb	r3, [r3, r2]
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	3b01      	subs	r3, #1
 8001f36:	1e5a      	subs	r2, r3, #1
 8001f38:	4193      	sbcs	r3, r2
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	e01f      	b.n	8001f7e <HAL_TIMEx_PWMN_Start+0x62>
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	2b04      	cmp	r3, #4
 8001f42:	d108      	bne.n	8001f56 <HAL_TIMEx_PWMN_Start+0x3a>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2243      	movs	r2, #67	; 0x43
 8001f48:	5c9b      	ldrb	r3, [r3, r2]
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	1e5a      	subs	r2, r3, #1
 8001f50:	4193      	sbcs	r3, r2
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	e013      	b.n	8001f7e <HAL_TIMEx_PWMN_Start+0x62>
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	2b08      	cmp	r3, #8
 8001f5a:	d108      	bne.n	8001f6e <HAL_TIMEx_PWMN_Start+0x52>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2244      	movs	r2, #68	; 0x44
 8001f60:	5c9b      	ldrb	r3, [r3, r2]
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	3b01      	subs	r3, #1
 8001f66:	1e5a      	subs	r2, r3, #1
 8001f68:	4193      	sbcs	r3, r2
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	e007      	b.n	8001f7e <HAL_TIMEx_PWMN_Start+0x62>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2245      	movs	r2, #69	; 0x45
 8001f72:	5c9b      	ldrb	r3, [r3, r2]
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	3b01      	subs	r3, #1
 8001f78:	1e5a      	subs	r2, r3, #1
 8001f7a:	4193      	sbcs	r3, r2
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <HAL_TIMEx_PWMN_Start+0x6a>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e05b      	b.n	800203e <HAL_TIMEx_PWMN_Start+0x122>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d104      	bne.n	8001f96 <HAL_TIMEx_PWMN_Start+0x7a>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2242      	movs	r2, #66	; 0x42
 8001f90:	2102      	movs	r1, #2
 8001f92:	5499      	strb	r1, [r3, r2]
 8001f94:	e013      	b.n	8001fbe <HAL_TIMEx_PWMN_Start+0xa2>
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	2b04      	cmp	r3, #4
 8001f9a:	d104      	bne.n	8001fa6 <HAL_TIMEx_PWMN_Start+0x8a>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2243      	movs	r2, #67	; 0x43
 8001fa0:	2102      	movs	r1, #2
 8001fa2:	5499      	strb	r1, [r3, r2]
 8001fa4:	e00b      	b.n	8001fbe <HAL_TIMEx_PWMN_Start+0xa2>
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	2b08      	cmp	r3, #8
 8001faa:	d104      	bne.n	8001fb6 <HAL_TIMEx_PWMN_Start+0x9a>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2244      	movs	r2, #68	; 0x44
 8001fb0:	2102      	movs	r1, #2
 8001fb2:	5499      	strb	r1, [r3, r2]
 8001fb4:	e003      	b.n	8001fbe <HAL_TIMEx_PWMN_Start+0xa2>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2245      	movs	r2, #69	; 0x45
 8001fba:	2102      	movs	r1, #2
 8001fbc:	5499      	strb	r1, [r3, r2]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6839      	ldr	r1, [r7, #0]
 8001fc4:	2204      	movs	r2, #4
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	f000 f8a2 	bl	8002110 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2180      	movs	r1, #128	; 0x80
 8001fd8:	0209      	lsls	r1, r1, #8
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a19      	ldr	r2, [pc, #100]	; (8002048 <HAL_TIMEx_PWMN_Start+0x12c>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d00f      	beq.n	8002008 <HAL_TIMEx_PWMN_Start+0xec>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	2380      	movs	r3, #128	; 0x80
 8001fee:	05db      	lsls	r3, r3, #23
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d009      	beq.n	8002008 <HAL_TIMEx_PWMN_Start+0xec>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a14      	ldr	r2, [pc, #80]	; (800204c <HAL_TIMEx_PWMN_Start+0x130>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d004      	beq.n	8002008 <HAL_TIMEx_PWMN_Start+0xec>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a13      	ldr	r2, [pc, #76]	; (8002050 <HAL_TIMEx_PWMN_Start+0x134>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d111      	bne.n	800202c <HAL_TIMEx_PWMN_Start+0x110>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	2207      	movs	r2, #7
 8002010:	4013      	ands	r3, r2
 8002012:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2b06      	cmp	r3, #6
 8002018:	d010      	beq.n	800203c <HAL_TIMEx_PWMN_Start+0x120>
    {
      __HAL_TIM_ENABLE(htim);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2101      	movs	r1, #1
 8002026:	430a      	orrs	r2, r1
 8002028:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800202a:	e007      	b.n	800203c <HAL_TIMEx_PWMN_Start+0x120>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2101      	movs	r1, #1
 8002038:	430a      	orrs	r2, r1
 800203a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	0018      	movs	r0, r3
 8002040:	46bd      	mov	sp, r7
 8002042:	b004      	add	sp, #16
 8002044:	bd80      	pop	{r7, pc}
 8002046:	46c0      	nop			; (mov r8, r8)
 8002048:	40012c00 	.word	0x40012c00
 800204c:	40000400 	.word	0x40000400
 8002050:	40014000 	.word	0x40014000

08002054 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	223c      	movs	r2, #60	; 0x3c
 8002062:	5c9b      	ldrb	r3, [r3, r2]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d101      	bne.n	800206c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002068:	2302      	movs	r3, #2
 800206a:	e047      	b.n	80020fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	223c      	movs	r2, #60	; 0x3c
 8002070:	2101      	movs	r1, #1
 8002072:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	223d      	movs	r2, #61	; 0x3d
 8002078:	2102      	movs	r1, #2
 800207a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2270      	movs	r2, #112	; 0x70
 8002090:	4393      	bics	r3, r2
 8002092:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	4313      	orrs	r3, r2
 800209c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a16      	ldr	r2, [pc, #88]	; (8002104 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d00f      	beq.n	80020d0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	2380      	movs	r3, #128	; 0x80
 80020b6:	05db      	lsls	r3, r3, #23
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d009      	beq.n	80020d0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a11      	ldr	r2, [pc, #68]	; (8002108 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d004      	beq.n	80020d0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a10      	ldr	r2, [pc, #64]	; (800210c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d10c      	bne.n	80020ea <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	2280      	movs	r2, #128	; 0x80
 80020d4:	4393      	bics	r3, r2
 80020d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	68ba      	ldr	r2, [r7, #8]
 80020de:	4313      	orrs	r3, r2
 80020e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	223d      	movs	r2, #61	; 0x3d
 80020ee:	2101      	movs	r1, #1
 80020f0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	223c      	movs	r2, #60	; 0x3c
 80020f6:	2100      	movs	r1, #0
 80020f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	0018      	movs	r0, r3
 80020fe:	46bd      	mov	sp, r7
 8002100:	b004      	add	sp, #16
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40012c00 	.word	0x40012c00
 8002108:	40000400 	.word	0x40000400
 800210c:	40014000 	.word	0x40014000

08002110 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	221f      	movs	r2, #31
 8002120:	4013      	ands	r3, r2
 8002122:	2204      	movs	r2, #4
 8002124:	409a      	lsls	r2, r3
 8002126:	0013      	movs	r3, r2
 8002128:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	43d2      	mvns	r2, r2
 8002132:	401a      	ands	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6a1a      	ldr	r2, [r3, #32]
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	211f      	movs	r1, #31
 8002140:	400b      	ands	r3, r1
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	4099      	lsls	r1, r3
 8002146:	000b      	movs	r3, r1
 8002148:	431a      	orrs	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	621a      	str	r2, [r3, #32]
}
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	46bd      	mov	sp, r7
 8002152:	b006      	add	sp, #24
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <__libc_init_array>:
 8002158:	b570      	push	{r4, r5, r6, lr}
 800215a:	2600      	movs	r6, #0
 800215c:	4d0c      	ldr	r5, [pc, #48]	; (8002190 <__libc_init_array+0x38>)
 800215e:	4c0d      	ldr	r4, [pc, #52]	; (8002194 <__libc_init_array+0x3c>)
 8002160:	1b64      	subs	r4, r4, r5
 8002162:	10a4      	asrs	r4, r4, #2
 8002164:	42a6      	cmp	r6, r4
 8002166:	d109      	bne.n	800217c <__libc_init_array+0x24>
 8002168:	2600      	movs	r6, #0
 800216a:	f000 f821 	bl	80021b0 <_init>
 800216e:	4d0a      	ldr	r5, [pc, #40]	; (8002198 <__libc_init_array+0x40>)
 8002170:	4c0a      	ldr	r4, [pc, #40]	; (800219c <__libc_init_array+0x44>)
 8002172:	1b64      	subs	r4, r4, r5
 8002174:	10a4      	asrs	r4, r4, #2
 8002176:	42a6      	cmp	r6, r4
 8002178:	d105      	bne.n	8002186 <__libc_init_array+0x2e>
 800217a:	bd70      	pop	{r4, r5, r6, pc}
 800217c:	00b3      	lsls	r3, r6, #2
 800217e:	58eb      	ldr	r3, [r5, r3]
 8002180:	4798      	blx	r3
 8002182:	3601      	adds	r6, #1
 8002184:	e7ee      	b.n	8002164 <__libc_init_array+0xc>
 8002186:	00b3      	lsls	r3, r6, #2
 8002188:	58eb      	ldr	r3, [r5, r3]
 800218a:	4798      	blx	r3
 800218c:	3601      	adds	r6, #1
 800218e:	e7f2      	b.n	8002176 <__libc_init_array+0x1e>
 8002190:	080021f8 	.word	0x080021f8
 8002194:	080021f8 	.word	0x080021f8
 8002198:	080021f8 	.word	0x080021f8
 800219c:	080021fc 	.word	0x080021fc

080021a0 <memset>:
 80021a0:	0003      	movs	r3, r0
 80021a2:	1882      	adds	r2, r0, r2
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d100      	bne.n	80021aa <memset+0xa>
 80021a8:	4770      	bx	lr
 80021aa:	7019      	strb	r1, [r3, #0]
 80021ac:	3301      	adds	r3, #1
 80021ae:	e7f9      	b.n	80021a4 <memset+0x4>

080021b0 <_init>:
 80021b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021b6:	bc08      	pop	{r3}
 80021b8:	469e      	mov	lr, r3
 80021ba:	4770      	bx	lr

080021bc <_fini>:
 80021bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021be:	46c0      	nop			; (mov r8, r8)
 80021c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021c2:	bc08      	pop	{r3}
 80021c4:	469e      	mov	lr, r3
 80021c6:	4770      	bx	lr
